<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  </head>
  <body>

        <!-- DO NOT EDIT THIS FILE! It was generated automatically.
             Edit the source file (news.xml) instead -->

        <h1>Releases</h1><p>This is the list of official releases for libvirt, along with an
        overview of the changes introduced by each of them.</p><p>For a more fine-grained view, use the
        <a href="https://libvirt.org/git/?p=libvirt.git;a=log">git log</a>.
        </p><h3><a id="v5.6.0"><strong>v5.6.0 (2019-08-05)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Introduce a new video model of type 'bochs'
        </dt><dd>
          Introduce a new video model type that supports the
          <code>bochs-display</code> device that was added in qemu version 3.0.
        </dd></dl></li><li><dl><dt>
          api: new virDomainCheckpoint APIs
        </dt><dd>
          Introduce several new APIs for creating and managing
          checkpoints in the test and qemu drivers (the latter
          requires qcow2 images). Checkpoints serve as a way to tell
          which portions of a disk have changed since a point in time.
        </dd></dl></li><li><dl><dt>
          qemu: Add support for overriding max threads per process limit
        </dt><dd>
          systemd-based systems impose a limit on the number of threads a
          process can spawn, which in some cases can be exceeded by QEMU
          processes running VMs. Add a <code>max_threads_per_process</code>
          option to qemu.conf to override the system default.
        </dd></dl></li><li><dl><dt>
          Remember original owners and SELinux labels of files
        </dt><dd>
          When a domain is starting up libvirt changes DAC and
          SELinux labels so that domain can access it. However,
          it never remembered the original labels and therefore
          the file was returned back to <code>root:root</code>.
          With this release, the original labels are remembered
          and restored properly.
        </dd></dl></li><li><dl><dt>
          network: Allow passing arbitrary options to dnsmasq
        </dt><dd>
          This works similarly to the existing support for passing arbitary
          options to QEMU, and just like that feature it comes with no
          support guarantees.
        </dd></dl></li></ul></li><li><strong>Removed features</strong><ul class="news-section-content"><li><dl><dt>
          xen: Remove sxpr config support
        </dt><dd>
          Remove the sxpr style config parser and formatter a year after the
          xend driver was removed.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Allow XML validation for snapshot creation
        </dt><dd>
          Add flag <code>VIR_DOMAIN_SNAPSHOT_CREATE_VALIDATE</code> to validate
          snapshot input XML. For virsh, users can use it as <code>virsh
          snapshot-create --validate</code>.
        </dd></dl></li><li><dl><dt>
          Support encrypted soft TPM
        </dt><dd>
          A soft TPM backend could be encrypted with passphrase. Now libvirt
          supports using a <code>secret</code> object to hold the passphrase,
          and referring to it via the <code>encryption</code> element of the
          TPM device.
        </dd></dl></li><li><dl><dt>
          test driver: Expand API coverage
        </dt><dd>
          Additional APIs have been implemented in the test driver.
        </dd></dl></li><li><dl><dt>
          Implement per-driver locking
        </dt><dd>
          Drivers now acquire a lock when they're loaded, ensuring that there
          can never be two instances of the same driver active at a time.
        </dd></dl></li><li><dl><dt>
          nss: Report newer addresses first
        </dt><dd>
          In some cases, a guest might be assigned a new IP address by DHCP
          before the previous lease has expired, in which case the NSS plugin
          will correctly report both addresses; many applications, however,
          ignore all addresses but the first, and may thus end up trying to
          connect using a stale address. To prevent that from happening, the
          NSS plugin will now always report the newest address first.
        </dd></dl></li><li><dl><dt>
          util: Optimize mass closing of FDs when spawning child processes
        </dt><dd>
          When the limit on the number of FDs is very high, closing all
          unwanted FDs after calling <code>fork()</code> can take a lot of
          time and delay the start of the child process. libvirt will now
          use an optimized algorithm that minimizes such delays.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          logging: Ensure virtlogd rollover takes priority over logrotate
        </dt><dd>
          virtlogd implements its own rollover mechanism, but until now
          logrotate could end up acting on the logs before virtlogd had a
          chance to do so itself.
        </dd></dl></li></ul></li></ul><h3><a id="v5.5.0"><strong>v5.5.0 (2019-07-02)</strong></a></h3><ul><li><strong>Security</strong><ul class="news-section-content"><li><dl><dt>
          api: Prevent access to several APIs over read-only connections
        </dt><dd>
          Certain APIs give root-equivalent access to the host, and as such
          should be limited to privileged users. CVE-2019-10161,
          CVE-2019-10166, CVE-2019-10167, CVE-2019-10168.
        </dd></dl></li></ul></li><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Support SMMUv3 IOMMU
        </dt><dd>
          SMMUv3 is an IOMMU implementation for ARM virt guests.
        </dd></dl></li><li><dl><dt>
          network: Introduce the network port API
        </dt><dd>
          This new public API can be used by virtualization drivers to
          manage network resources associated with guests, and is a further
          step towards splitting libvirtd into multiple daemons.
        </dd></dl></li></ul></li><li><strong>Removed features</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Remove support for virDomainQemuAttach and virConnectDomainXMLFromNative APIs
        </dt><dd>
          The qemu implementations for the APIs mentioned above were removed
          and the APIs now return an error. The implementation was stale for a
          long time and did not work with modern QEMU command lines, generated
          from libvirt or otherwise.
        </dd></dl></li><li><dl><dt>
          Stop supporting migration of config files from pre-XDG layout
        </dt><dd>
          The new layout was introduced with libvirt 0.9.13 (Jul 2012).
        </dd></dl></li><li><dl><dt>
          Remove Avahi mDNS support
        </dt><dd>
          This feature was never used outside of virt-manager, which has
          itself stopped using it a while ago.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          sysinfo: Report SMBIOS information on aarch64
        </dt><dd>
          While SMBIOS support has historically been limited to x86_64, modern
          aarch64 machines often offer access to the same information as well,
          and libvirt now exposes it to the user when that's the case.
        </dd></dl></li><li><dl><dt>
          test driver: Expand API coverage
        </dt><dd>
          Even more APIs that were missing from the test driver have now been
          implemented.
        </dd></dl></li><li><dl><dt>
          virt-xml-validate: Allow input to be read from stdin
        </dt><dd/></dl></li><li><dl><dt>
          qemu: Validate spapr-vio addresses as 32-bit
        </dt><dd>
          libvirt has always considered these addresses (used for pSeries
          guests) as 64-bit, but the sPAPR specification says that they're
          32-bit instead.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Set process affinity correctly when using &lt;numatune&gt;
        </dt><dd>
          libvirt would mistakenly interpret the <code>nodeset</code>
          attribute as a list of CPUs instead of as a list of NUMA node, and
          the process affinity would be set incorrectly as a result; this has
          now been fixed.
        </dd></dl></li></ul></li></ul><h3><a id="v5.4.0"><strong>v5.4.0 (2019-06-03)</strong></a></h3><ul><li><strong>Security</strong><ul class="news-section-content"><li><dl><dt>
          cpu: Introduce support for the md-clear CPUID bit
        </dt><dd>
          This bit is set when microcode provides the mechanism to invoke a
          flush of various exploitable CPU buffers by invoking the x86
          <code>VERW</code> instruction. CVE-2018-12126, CVE-2018-12127,
          CVE-2018-12130, CVE-2019-11091.
        </dd></dl></li><li><dl><dt>
          Restrict user access to virt-admin, virtlogd and virtlockd
        </dt><dd>
          The intended users for these facilities are the <code>root</code>
          user and the <code>libvirtd</code> service respectively, but these
          restrictions were not enforced correctly. CVE-2019-10132.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          test driver: Expand API coverage
        </dt><dd>
          Several APIs that were missing from the test driver have now been
          implemented.
        </dd></dl></li><li><dl><dt>
          Avoid unnecessary static linking
        </dt><dd>
          Most binaries shipped as part of libvirt, for example
          <code>virtlogd</code> and <code>libvirt_iohelper</code>, were
          embedding parts of the library even though they also linked against
          the <code>libvirt.so</code> dynamic library. This is no longer the
          case, which results in both the disk and memory footprint being
          reduced.
        </dd></dl></li><li><dl><dt>
          qemu: Report stat-htlb-pgalloc and stat-htlb-pgfail balloon stats
        </dt><dd>
          These stats have been introduced in QEMU 3.0.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Fix emulator scheduler support
        </dt><dd>
          Setting the scheduler for QEMU's main thread before QEMU had a chance
          to start up other threads was misleading as it would affect other
          threads (vCPU and I/O) as well.  In some particular situations this
          could also lead to an error when the thread for vCPU #0 was being
          moved to its cpu,cpuacct cgroup.  This was fixed so that the
          scheduler for the main thread is set after QEMU starts.
        </dd></dl></li><li><dl><dt>
          apparmor: Allow hotplug of vhost-scsi devices
        </dt><dd/></dl></li></ul></li></ul><h3><a id="v5.3.0"><strong>v5.3.0 (2019-05-04)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Add support for setting the emulator scheduler parameters
        </dt><dd>
          I/O threads and vCPU threads already support setting schedulers, but
          until now it was impossible to do so for the main QEMU thread
          (emulator thread in the libvirt naming).  This is, however, requested
          for some very specific scenarios, for example when vCPU threads are
          running at such priority that could starve the main thread.
        </dd></dl></li></ul></li><li><strong>Removed features</strong><ul class="news-section-content"><li><dl><dt>
          vbox: Drop support for VirtualBox 4.x releases
        </dt><dd>
          Support for all the 4.x releases was ended by
          VirtualBox maintainers in December 2015. Therefore,
          libvirt support for these releases is dropped.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Use PCI by default for RISC-V guests
        </dt><dd>
          PCI support for RISC-V guests was already available in libvirt
          5.1.0, but it required the user to opt-in by manually assigning
          PCI addresses: with this release, RISC-V guests will use PCI
          automatically when running against a recent enough (4.0.0+) QEMU
          release.
        </dd></dl></li><li><dl><dt>
          qemu: Advertise firmware autoselection in domain capabilities
        </dt><dd>
          The firmware autoselection feature is now exposed in
          domain capabilities and management applications can
          query for accepted values, i.e. values that are accepted
          and for which libvirt found firmware descriptor files.
          Firmware Secure Boot support is also advertised.
        </dd></dl></li><li><dl><dt>
          Drop YAJL 1 support
        </dt><dd>
          YAJL 2 is widely adopted and maintaining side by side
          support for two versions is unnecessary.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          rpc: cleanup in virNetTLSContextNew
        </dt><dd>
          Failed new gnutls context allocations in virNetTLSContextNew
          function results in double free and segfault. Occasional memory
          leaks may also occur.
        </dd></dl></li><li><dl><dt>
          virsh: various completers fixes
        </dt><dd>
          There were some possible crashers, memory leaks, etc.
          which are now fixed.
        </dd></dl></li><li><dl><dt>
          qemu: Make hugepages work with memfd backend
        </dt><dd>
          Due to a bug in command line generation libvirt did not
          honor hugepages setting with memfd backend.
        </dd></dl></li><li><dl><dt>
          Enforce ACL write permission for getting guest time &amp; hostname
        </dt><dd>
          Getting the guest time and hostname both require use of
          guest agent commands. These must not be allowed for
          read-only users, so the permissions check must validate
          "write" permission not "read".
        </dd></dl></li></ul></li></ul><h3><a id="v5.2.0"><strong>v5.2.0 (2019-04-03)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          Add Storage Pool Capabilities output
        </dt><dd>
          Add support to list an enumerated list of supported Storage
          Pools via the virConnectGetCapabilities API when connected
          via a Storage Driver. Add support to get a more detailed
          list XML output Storage Pool Capabilities vis the
          virConnectGetStoragePoolCapabilites API.
        </dd></dl></li><li><dl><dt>
          qemu: Support virtio-{non-}transitional device models
        </dt><dd>
          <code>virtio-transitional</code> and
          <code>virtio-non-transitional</code> <code>model</code> values
          were added to the QEMU driver for the following devices:
          <code>disk</code>, <code>interface</code>, <code>filesystem</code>,
          <code>rng</code>, <code>vsock</code>, <code>memballoon</code>,
          <code>controller</code> type <code>scsi</code>,
          <code>controller</code> type <code>virtio-serial</code>,
          <code>input</code> bus <code>virtio</code>
          type <code>passthrough</code>,
          <code>hostdev</code> type <code>scsi_host</code>. These new
          models can be used to give fine grained control over what
          virtio device version is presented to the guest.
        </dd></dl></li><li><dl><dt>
          qemu: Enable firmware autoselection
        </dt><dd>
          Libvirt allows users to provide loader path for some time now.
          However, this puts some burden on users because they need to
          know what firmware meets their requirements. Now that QEMU
          ships firmware description files this burden can be moved onto
          libvirt. It is as easy as setting the <code>firmware</code>
          attribute in the <code>os</code> element (accepted values are
          <code>bios</code> and <code>efi</code>). Moreover, libvirt
          automatically enables domain features needed for firmware it
          chooses.
        </dd></dl></li><li><dl><dt>
          snapshots: Add support for topological listings
        </dt><dd>
          A new flag VIR_DOMAIN_SNAPSHOT_LIST_TOPOLOGICAL is available
          for the various snapshot listing APIs such as
          virDomainListAllSnapshots(). For drivers that support the
          flag, the listed snapshots are guaranteed to be sorted such
          that parents occur before children.
        </dd></dl></li><li><dl><dt>
          Xen: Add support for max grant frames setting
        </dt><dd>
          Add support for Xen's max_grant_frames setting by adding a
          new xenbus controller type with a maxGrantFrames attribute.
          E.g. <code>&lt;controller type='xenbus' maxGrantFrames='64'/&gt;</code>
        </dd></dl></li><li><dl><dt>
          qemu: Add support for parallel migration
        </dt><dd>
          With QEMU 4.0.0 libvirt can enable parallel migration which causes
          the memory pages to be processed in parallel by several threads and
          sent to the destination host using several connections at the same
          time. This may increase migration speed in case a single thread is
          unable to saturate the network link.
        </dd></dl></li></ul></li><li><strong>Removed features</strong><ul class="news-section-content"><li><dl><dt>
          Drop support for Upstart and "Red Hat" init scripts
        </dt><dd>
          Not a single one of the platforms we target still uses Upstart,
          and the Upstart project itself has been abandoned for several years
          now; the same is true for the "Red Hat" (really System V) init
          scripts, since RHEL 7 and later releases use systemd.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          Report class information for PCI node device capability.
        </dt><dd/></dl></li><li><dl><dt>
          Split setup of IPv4 and IPv6 top level chain
        </dt><dd>
          The requirement resulting from private chains improvement done
          in <code>v5.1.0</code> was refined so that only tables from
          corresponding IP version are required. This means that if a
          network doesn't have <code>IPv6</code> enabled then those
          tables are not required.
        </dd></dl></li><li><dl><dt>
          Don't default to building the QEMU driver
        </dt><dd>
          Historically, the QEMU driver has been special in that it was
          enabled by default, with the option to explicitly opt-out of it;
          starting now, we're enabling it opportunistically if we detect that
          all requirements are available, just like we do with other drivers.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          virt-host-validate: Fix IOMMU check on s390x
        </dt><dd/></dl></li><li><dl><dt>
          qemu: Allow creating pSeries guests with graphics and no USB mouse
        </dt><dd>
          It's now possible to prevent libvirt from automatically adding a
          USB mouse to pSeries guests by including a USB tablet in the input
          XML: doing so is desiderable as using a tablet results in a much
          better user experience when working with GUIs.
        </dd></dl></li><li><dl><dt>
          qemu: Set $HOME and XGD variables for qemu:///system guests
        </dt><dd>
          This avoids files being accidentally created under <code>/</code> or
          the guests not being able to start because they lack the necessary
          permissions to write to that location.
        </dd></dl></li></ul></li></ul><h3><a id="v5.1.0"><strong>v5.1.0 (2019-03-04)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          bhyve: Add support for additional command-line arguments
        </dt><dd>
          The bhyve driver now supports passing additional command-line
          arguments to the bhyve process using the new
          <code>&lt;bhyve:commandline&gt;</code> element in domain
          configuration.
        </dd></dl></li><li><dl><dt>
          network: Support setting a firewalld "zone" for virtual network bridges
        </dt><dd>
          All libvirt virtual networks with bridges managed by libvirt
          (i.e. those with forward mode of "nat", "route", "open", or
          no forward mode) will now be placed in a special firewalld
          zone called "libvirt" by default. The zone of any network
          bridge can be changed using the <code>zone</code> attribute
          of the network's <code>bridge</code> element.
        </dd></dl></li><li><dl><dt>
          bhyve: Support for ignoring unknown MSRs reads and writes
        </dt><dd>
          A new &lt;features&gt; element &lt;msrs unknown='ignore'/&gt; was
          introduced and the bhyve driver supports it to control unknown
          Model Specific Registers (MSRs) reads and writes.
        </dd></dl></li><li><dl><dt>
          qemu: Add support for encrypted VNC TLS keys
        </dt><dd>
          Use the password stored in the secret driver under the uuid
          specified by the <code>vnc_tls_x509_secret_uuid</code> option
          in qemu.conf.
        </dd></dl></li><li><dl><dt>
          Add storage pool namespace options
        </dt><dd>
          Allow for adjustment of RBD configuration options via Storage
          Pool XML Namespace adjustments.
        </dd></dl></li><li><dl><dt>
          qemu: Add support for setting post-copy migration bandwidth
        </dt><dd>
          Users can now limit the bandwidth of post-copy migration, e.g.
          via <code>virsh migrate --postcopy-bandwidth</code>.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          Create private chains for virtual network firewall rules
        </dt><dd>
          Historically firewall rules for virtual networks were added
          straight into the base chains. This works but has a number of
          bugs and design limitations. To address them, libvirt now puts
          firewall rules into its own chains. Note that with this change the
          <code>filter</code>, <code>nat</code> and <code>mangle</code> tables
          are required for both <code>IPv4</code> and <code>IPv6</code>.
        </dd></dl></li><li><dl><dt>
          Detect CEPH and GPFS as shared FS
        </dt><dd>
          When starting a migration libvirt performs some sanity checks
          to make sure domain will be able to run on the destination.
          One of the requirements is that the disk has to either be
          migrated too or be accessible from a network filesystem. CEPH
          and GPFS weren't detected as a network filesystem.
        </dd></dl></li><li><dl><dt>
          Advertise network MTU via DHCP when specified
        </dt><dd>
          If network MTU is set and the network has DHCP enabled,
          advertise the MTU in DHCP transaction too so that clients can
          adjust their link accordingly.
        </dd></dl></li><li><dl><dt>
          qemu: Allocate memory at the configured NUMA nodes from start
        </dt><dd>
          Libvirt used to just start QEMU, let it allocate memory for
          the guest, and then use CGroups to move the memory to
          configured NUMA nodes. This is suboptimal as huge chunks of
          memory have to be moved. Moreover, this relies on ability to
          move memory later which is not always true. A change was made
          to set process affinity correctly from the start so that memory
          is allocated on the configured nodes from the beginning.
        </dd></dl></li><li><dl><dt>
          Support for newer Wireshark
        </dt><dd>
          Adapt libvirt to use the more recent release requiring a
          source build configuration of libvirt
          <code>--with-wireshark</code> to upgrade to the more recent
          version.
        </dd></dl></li><li><dl><dt>
          Batch mode virsh and virt-admin parsing improvements
        </dt><dd>
          When parsing a single-argument command_string in batch mode,
          virsh and virt-admin now permit newlines in addition to
          semicolons for splitting commands, and backslash-newline for
          splitting long lines, to be more like shell parsing.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Use CAP_DAC_OVERRIDE during QEMU capabilities probing
        </dt><dd>
          By default, libvirt runs the QEMU process as <code>qemu:qemu</code>
          which could cause issues during probing as some features like AMD SEV
          might be inaccessible to QEMU because of file system permissions.
          Therefore, <code>CAP_DAC_OVERRIDE</code> is granted to overcome these
          for the purposes of probing.
        </dd></dl></li><li><dl><dt>
          storage: Add default mount options for fs/netfs storage pools
        </dt><dd>
          Altered the command line generation for fs/netfs storage pools to
          add some default options. For Linux based systems, the options
          added are "nodev, nosuid, noexec". For FreeBSD based systems,
          the options added are "nosuid, noexec".
        </dd></dl></li><li><dl><dt>
          qemu: Allow use of PCI for RISC-V guests
        </dt><dd>
          This works with QEMU 4.0.0+ only and is opt-in at the moment, since
          it requires users to manually assign PCI addresses, but is otherwise
          fully functional.
        </dd></dl></li><li><dl><dt>
          network: Fix virtual networks on systems using firewalld+nftables
        </dt><dd>
          Because of the transitional state of firewalld's new support
          for nftables, not all iptables features required by libvirt
          are yet available, so libvirt must continue to use iptables
          for its own packet filtering rules even when the firewalld
          backend is set to use nftables. However, due to the way
          iptables support is implemented in kernels using nftables
          (iptables rules are converted to nftables rules and
          processed in a separate hook from the native nftables
          rules), guest networking was broken on hosts with firewalld
          configured to use nftables as the backend. This has been
          fixed by putting libvirt-managed bridges in their own
          firewalld zone, so that guest traffic can be forwarded
          beyond the host and host services can be exposed to guests
          on the virtual network without opening up those same
          services to the rest of the physical network. This means
          that host access from virtual machines is no longer
          controlled by the firewalld default zone (usually "public"),
          but rather by the new firewalld zone called "libvirt"
          (unless configured otherwise using the new zone
          attribute of the network bridge element).
        </dd></dl></li><li><dl><dt>
          qemu: Fix i6300esb watchdog hotplug on Q35
        </dt><dd>
          Ensure that libvirt allocates a PCI address for the device so
          that QEMU did not default to an address that would not allow
          for device hotplug.
        </dd></dl></li><li><dl><dt>
          lxc: Don't reboot host on virDomainReboot
        </dt><dd>
          If the container is really a simple one (init is just bash and
          the whole root is passed through) then virDomainReboot and
          virDomainShutdown would reboot or shutdown the host. The
          solution is to use different method to reboot or shutdown the
          container in that case (e.g. signal).
        </dd></dl></li><li><dl><dt>
          rpc: Various stream fixes
        </dt><dd>
          One particular race was fixed, one locking problem and error
          reporting from streams was made better.
        </dd></dl></li><li><dl><dt>
          qemu: Fix guestfwd hotplug/hotunplug
        </dt><dd>
          Fixed the generation of the guestfwd hotplug/unplug command
          sent to QEMU to match the syntax used when creating the
          initial command line.
        </dd></dl></li><li><dl><dt>
          qemu: Forbid CDROMs on virtio bus
        </dt><dd>
          Attempting to create an empty virtio-blk drive or attempting
          to eject it results into an error.  Forbid configurations
          where users would attempt to use CDROMs in virtio bus.
        </dd></dl></li><li><dl><dt>
          qemu: Use 'raw' for 'volume' disks without format
        </dt><dd>
          Storage pools might want to specify format of the image when
          translating the volume thus libvirt can't add any default
          format when parsing the XML. Add an explicit format when
          starting the VM and format is not present neither by user
          specifying it nor by the storage pool translation function.
        </dd></dl></li><li><dl><dt>
          qemu: Assume 'raw' default storage format also for network storage
        </dt><dd>
          Post parse callback adds the 'raw' type only for local files.
          Remote files can also have backing store (even local) so we
          should do this also for network backed storage.
        </dd></dl></li><li><dl><dt>
          qemu: Fix block job progress reporting and advocate for READY event
        </dt><dd>
          In some cases QEMU can get to 100% and still not reach the
          synchronised phase. Initiating a pivot in that case will fail.
          Therefore it is strongly advised to wait for
          <code>VIR_DOMAIN_BLOCK_JOB_READY</code> event which does not
          suffer from this problem.
        </dd></dl></li><li><dl><dt>
          qemu: Don't format image properties for empty drive
        </dt><dd>
          If a <code>-drive</code> has no image, then formatting
          attributes such as cache, readonly, etc. would cause errors to
          be reported from QEMU. This was fixed by not supplying the
          attributes for devices without an image.
        </dd></dl></li><li><dl><dt>
          External snapshot metadata redefinition is fixed
        </dt><dd>
          Attempting to use VIR_DOMAIN_SNAPSHOT_CREATE_REDEFINE to
          reinstate the metadata describing an external snapshot
          created earlier for an offline domain no longer fails.
        </dd></dl></li></ul></li></ul><h3><a id="v5.0.0"><strong>v5.0.0 (2019-01-15)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          Xen: Add support for openvswitch
        </dt><dd>
          The libxl driver now supports virtual interfaces that connect to
          an openvswitch bridge, including interfaces with VLAN tagging and
          trunking configuration.
        </dd></dl></li><li><dl><dt>
          qemu: Report whether KVM nesting is available
        </dt><dd>
          Running nested KVM guests requires specific configuration steps to
          be performed on the host; libvirt will now report in the host
          capabilities whether KVM nesting support is available.
        </dd></dl></li></ul></li><li><strong>Removed features</strong><ul class="news-section-content"><li><dl><dt>
          Drop UML driver
        </dt><dd>
          The UML driver was unmaintained and not tested for
          quite some time now. Worse, there is a bug that causes
          it to deadlock on some very basic operations (e.g.
          dumping domain XML). These facts make us believe no one
          uses it.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Add support for ARMv6l guests
        </dt><dd/></dl></li><li><dl><dt>
          Support more NVDIMM configuration options
        </dt><dd>
          Introduce more configuration options. For the source element, add
          the 'alignsize' and 'pmem' subelements. For the target element, add
          the 'readonly' subelement.
        </dd></dl></li><li><dl><dt>
          cpu: Add support for "stibp" x86_64 feature
        </dt><dd>
          Add cpu flag stibp (Single Thread Indirect Branch Predictors) to
          prevent indirect branch predictions from being controlled by the
          sibling Hyperthread.
        </dd></dl></li><li><dl><dt>
          libxl: Handle external domain destroy
        </dt><dd>
          Historically, if a domain was destroyed using <code>xl</code>
          rather than through libvirt APIs, libvirt would not be aware of
          the fact and keep considering it as running. This is no longer the
          case.
        </dd></dl></li><li><dl><dt>
          Start selecting the first available DRI device for OpenGL operations
        </dt><dd>
          If OpenGL support is needed (either with SPICE gl enabled or with
          egl-headless), libvirt is now able to pick the first available DRI
          device for the job. At the same time, this improvement is also a
          bugfix as it prevents permission-related issues with regards to our
          mount namespaces and the default DRI render node's permissions which
          would normally prevent QEMU from accessing such a device.
        </dd></dl></li><li><dl><dt>
          qemu: Add support for postcopy-requests migration statistics
        </dt><dd>
          The <code>virDomainJobInfo</code> can get number page requests
          received from the destination host during post-copy migration.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          lxc: Don't forbid interfaces with type=direct
        </dt><dd>
          Such interfaces are supported by lxc and should be allowed.
        </dd></dl></li><li><dl><dt>
          qemu: Fully clean up RNG devices on detach
        </dt><dd>
          Some RNG device types, such as those using EGD, might need extra
          clean up on the host in addition to removing the guest-side device.
        </dd></dl></li></ul></li></ul><h3><a id="v4.10.0"><strong>v4.10.0 (2018-12-03)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Add Hyper-V PV IPI and Enlightened VMCS support
        </dt><dd>
          The QEMU driver now has support for Hyper-V PV IPI and Enlightened VMCS
          for Windows and Hyper-V guests.
        </dd></dl></li><li><dl><dt>
          qemu: Added support for PCI devices on S390
        </dt><dd>
          PCI addresses can now include the new zpci element which contains
          uid (user-defined identifier) and fid (PCI function identifier)
          attributes and makes the corresponding devices usable by S390
          guests.
        </dd></dl></li><li><dl><dt>
          Support changing IOThread polling parameters for a live guest
        </dt><dd>
          Introduced virDomainSetIOThreadParams which allows dynamically
          setting the IOThread polling parameters used by QEMU to manage
          the thread polling interval and the algorithm for growth or
          shrink of the polling time. The values only affect a running
          guest with IOThreads. The guest's IOThread polling values can
          be viewed via the domain statistics.
        </dd></dl></li><li><dl><dt>
          Xen: Add support for PVH
        </dt><dd>
          The libxl driver now supports Xen's PVH virtual machine type.
          PVH machines are enabled with the new "xenpvh" OS type, e.g.
          <code>&lt;os&gt;&lt;type&gt;xenpvh&lt;/type&gt;&lt;/os&gt;</code>
        </dd></dl></li><li><dl><dt>
          qemu: Added support for CMT (Cache Monitoring Technology)
        </dt><dd>
          Introduced cache monitoring using the <code>monitor</code>
          element in <code>cachetune</code> for vCPU threads. Added
          interfaces to get and display the cache utilization statistics
          through the command 'virsh domstats' via the
          virConnectGetAllDomainStats API.
        </dd></dl></li><li><dl><dt>
          qemu: Add support for nested HV for pSeries guests
        </dt><dd>
          Nested HV support makes it possible to run nested (L2) guests
          with minimal performance penalty when compared to regular (L1)
          guests on ppc64 hardware.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          Xen: Handle soft reset shutdown event
        </dt><dd>
          The pvops Linux kernel uses soft reset to handle the crash
          machine operation. The libxl driver now supports the soft
          reset shutdown event, allowing proper crash handling of
          pvops-based HVM domains.
        </dd></dl></li></ul></li></ul><h3><a id="v4.9.0"><strong>v4.9.0 (2018-11-04)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          util: Add cgroup v2 support
        </dt><dd>
          cgroup v2 support has been implemented in libvirt, with both
          "unified" (v2 only) and "hybrid" (v2 + v1) setups being usable;
          existing "legacy" (v1 only) setups will keep working.
        </dd></dl></li><li><dl><dt>
          qemu: Add vfio AP support
        </dt><dd>
          The QEMU driver now has support to passthrough adjunct processors
          into QEMU guests on S390.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          rpc: Make 'genprotocol' output reproducible
        </dt><dd>
          This is another step towards making libvirt builds fully
          reproducible.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          security: Fix permissions for UNIX sockets
        </dt><dd>
          Since 4.5.0, libvirt is using FD passing to hand sockets over to
          QEMU, which in theory removes the need for them to be accessible by
          the user under which the QEMU process is running; however, other
          processes such as vdsm need to access the sockets as well, which
          means adjusting permissions is still necessary.
        </dd></dl></li><li><dl><dt>
          cpu_map: Add Icelake model definitions
        </dt><dd>
          These CPU models will be available in the upcoming 3.1.0 QEMU
          release.
        </dd></dl></li><li><dl><dt>
          util: Properly parse URIs with missing trailing slash
        </dt><dd>
          Some storage URIs were not parsed correctly, in which case libvirt
          ended up emitting XML that it would then refuse to parse back.
        </dd></dl></li></ul></li></ul><h3><a id="v4.8.0"><strong>v4.8.0 (2018-10-01)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          Xen: Support PM Suspend and Wakeup
        </dt><dd>
          The libxl driver now supports the virDomainPMSuspendForDuration
          and virDomainPMWakeup APIs.
        </dd></dl></li></ul></li><li><strong>Removed features</strong><ul class="news-section-content"><li><dl><dt>
          Xen: Drop support for Xen 4.4 and 4.5
        </dt><dd>
          Xen 4.4 and 4.5 are no longer supported by the Xen community.
          Drop support for these older versions and require Xen &gt;= 4.6.
        </dd></dl></li><li><dl><dt>
          nwfilter: Disallow binding creation in session mode
        </dt><dd>
          Ensure that a filter binding creation is not attempted in session
          mode and generates a proper error message.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Retrieve guest hostname through QEMU Guest Agent command
        </dt><dd>
          QEMU is now able to retrieve the guest hostname using a new QEMU-GA
	  command called 'guest-get-host-name'. Virsh users can execute
          'domhostname' for QEMU driver for domains configured to use the
          Guest Agent.
        </dd></dl></li><li><dl><dt>
          virsh: Implement vsh-table in virsh and virsh-admin
        </dt><dd>
          The new API fixes problems with table-alignment, making the tables
          more readable and deals with unicode.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          storage: Allow inputvol to be encrypted
        </dt><dd>
          When creating a storage volume based on another volume, the base
          input volume is allowed to be encrypted.
        </dd></dl></li><li><dl><dt>
          virsh: Require explicit --domain for domxml-to-native
        </dt><dd>
          The --domain option for domxml-to-native virsh command has always
          been documented as required, but commit v4.3.0-127-gd86531daf2
          accidentally made it optional.
        </dd></dl></li><li><dl><dt>
          lxc_monitor: Avoid AB / BA lock race
        </dt><dd>
          A deadlock situation could occur when autostarting a LXC domain
          'guest' due to two threads attempting to take opposing locks while
          holding opposing locks (AB BA problem).
        </dd></dl></li></ul></li></ul><h3><a id="v4.7.0"><strong>v4.7.0 (2018-09-03)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          storage: add storage pool iscsi-direct
        </dt><dd>
          Introduce a new storage pool backend that uses libiscsi instead of
          iscsiadm. It support basic pool operations: checkPool and refreshPool.
        </dd></dl></li><li><dl><dt>
          Add support for MBA (Memory Bandwidth Allocation technology)
        </dt><dd>
          Domain vCPU threads can now have allocated some parts of host memory
          bandwidth by using the <code>memorytune</code> element in <code>cputune</code>.
        </dd></dl></li><li><dl><dt>
          qemu: Add support for RISC-V guests
        </dt><dd>
          riscv32 and riscv64 guest architectures are now supported.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Add ccw support for vhost-vsock
        </dt><dd>
          Support the vhost-vsock-ccw device on S390.
        </dd></dl></li><li><dl><dt>
          qemu: Make default machine type independent of QEMU
        </dt><dd>
          We can't control whether or not QEMU will change its default
          machine type in the future, or whether downstream distributions
          will decide to compile out some machine types, so our only option
          to provide a predictable behavior is taking care of the default
          ourselves; management applications and users are encouraged to
          explicitly pick a machine type when creating new guests.
        </dd></dl></li><li><dl><dt>
          apparmor: Various improvements
        </dt><dd>
          Rules have been added to deal with a number of scenarios that
          didn't work correctly.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          esx: Truncate CPU model name
        </dt><dd>
          Some CPU model names are too long to be stored into the
          corresponding property, and should be explicitly truncated
          to avoid unexpected behavior in users of the
          <code>virNodeGetInfo()</code> API such as
          <code>virsh nodeinfo</code>.
        </dd></dl></li><li><dl><dt>
          utils: Remove arbitrary limit on socket_id/core_id
        </dt><dd>
          Both values were assumed to be smaller than 4096, but in fact
          they are entirely hardware-dependent and there have been reports
          of machines presenting much bigger values, preventing libvirt from
          working correctly; all such limits have now been removed.
        </dd></dl></li></ul></li></ul><h3><a id="v4.6.0"><strong>v4.6.0 (2018-08-06)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Implement the HTM pSeries feature
        </dt><dd>
          Users can now decide whether HTM (Hardware Transactional Memory)
          support should be available to the guest.
        </dd></dl></li><li><dl><dt>
          qemu: Enable VNC console for mediated devices
        </dt><dd>
          Host devices now support a new atribute 'display' which can be used
          to turn on frame buffer rendering on a vgpu mediated device instead of
          on an emulated GPU, like QXL.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Introduce a new video model of type 'none'
        </dt><dd>
          Introduce a new video model type that disables the automatic addition
          of a video device to domains with 'graphics' specified in their XML.
          This can be useful with GPU mediated devices which can serve as the
          only rendering devices within the guest.
        </dd></dl></li><li><dl><dt>
          virsh: Add --alias to attach-disk and attach-interface commands
        </dt><dd>
          Add option --alias to set customized device alias name when
          using attach-disk or attach-interface commands.
        </dd></dl></li><li><dl><dt>
          virsh: Support usb and sata address to attach-disk
        </dt><dd>
          Usb or sata address could be used when attach-disk with --address.
          For example, use usb address as usb:&lt;bus&gt;.&lt;port&gt;, use
          sata address as &lt;controller&gt;.&lt;bus&gt;.&lt;unit&gt;.
        </dd></dl></li></ul></li></ul><h3><a id="v4.5.0"><strong>v4.5.0 (2018-07-02)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Provide TPM emulator support
        </dt><dd>
          Support QEMU's TPM emulator based on swtpm. Each QEMU guest gets
          its own virtual TPM.
        </dd></dl></li><li><dl><dt>
          bhyve: Support specifying guest CPU topology
        </dt><dd>
          Bhyve's guest CPU topology could be specified using the
          <code>&lt;cpu&gt;&lt;topology ../&gt;&lt;/cpu&gt;</code> element.
        </dd></dl></li><li><dl><dt>
          qemu: Add support for extended TSEG size
        </dt><dd>
          Support specifying extended TSEG size for SMM in QEMU.
        </dd></dl></li><li><dl><dt>
          qemu: Add support for SEV guests
        </dt><dd>
          SEV (Secure Encrypted Virtualization) is a feature available on AMD
          CPUs that encrypts the guest memory and makes it inaccessible even
          to the host OS.
        </dd></dl></li></ul></li><li><strong>Removed features</strong><ul class="news-section-content"><li><dl><dt>
          Remove support for qcow/default encrypted volumes
        </dt><dd>
          Disallow using a qcow encrypted volume for the guest and
          disallow creation of the qcow or default encrypted volume
          from the storage driver. Support for qcow encrypted volumes
          has been phasing out since QEMU 2.3 and by QEMU 2.9 creation
          of a qcow encrypted volume via qemu-img required usage of
          secret objects, but that support was never added to libvirt.
        </dd></dl></li><li><dl><dt>
          Make GnuTLS mandatory
        </dt><dd>
          Building without GnuTLS is no longer possible.
        </dd></dl></li><li><dl><dt>
          qemu: Remove allow_disk_format_probing configuration option
        </dt><dd>
          The option represented a security risk when used with malicious
          disk images, so users were recommended against enabling it; with
          this release, it's been removed altogether.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          capabilities: Provide info about host IOMMU support
        </dt><dd>
          Capabilities XML now provide information about host IOMMU support.
        </dd></dl></li><li><dl><dt>
          virsh: Add --all to domblkinfo command
        </dt><dd>
          Alter the <code>domblkinfo</code> command to add the option
          --all in order to display the size details of each domain
          block device from one command in a output table.
        </dd></dl></li><li><dl><dt>
          qemu: Allow concurrent access to monitor and guest agent
        </dt><dd>
          Historically libvirt prevented concurrent accesses to
          the qemu monitor and the guest agent. Therefore two
          independent calls (one querying the monitor and the
          other querying guest agent) would serialize which hurts
          performance. The code was reworked to allow two
          independent calls run at the same time.
        </dd></dl></li><li><dl><dt>
          qemu: Allow configuring the page size for HPT pSeries guests
        </dt><dd>
          For HPT pSeries guests, the size of the host pages used to back guest
          memory and the usable guest page sizes are connected; the new setting
          can be used to request that a certain page size is available in the
          guest.
        </dd></dl></li><li><dl><dt>
          Add support to use an raw input volume for encryption
        </dt><dd>
          It is now possible to provide a raw input volume as input for
          to generate a luks encrypted volume via either virsh vol-create-from
          or virStorageVolCreateXMLFrom.
        </dd></dl></li><li><dl><dt>
          qemu: Add support for vsock hot (un)plug and cold (un)plug
        </dt><dd/></dl></li><li><dl><dt>
          qemu: Add support for NBD over TLS
        </dt><dd>
          NBD volumes can now be accessed securely.
        </dd></dl></li><li><dl><dt>
          qemu: Implement FD passing for Unix sockets
        </dt><dd>
          Instead of having QEMU open the socket and then connecting to it,
          which is inherently racy, starting with QEMU 2.12 we can open the
          socket ourselves and pass it to QEMU, avoiding race conditions.
        </dd></dl></li><li><dl><dt>
          virsh: Introduce --nowait option for domstat command
        </dt><dd>
          When this option is specified, virsh will try to fetch the guest
          stats but abort instead of stalling if they can't be retrieved right
          away.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Fix a potential libvirtd crash on VM reconnect
        </dt><dd>
          Initialization of the driver worker pool needs to come before libvirtd
          trying to reconnect to all machines, since one of the QEMU processes
          migh have already emitted events which need to be handled prior to
          us getting to the worker pool initialization.
        </dd></dl></li><li><dl><dt>
          qemu: Fix domain resume after failed migration
        </dt><dd>
          Recent versions of QEMU activate block devices before the guest CPU
          has been started, which makes it impossible to roll back a failed
          migration. Use the <code>late-block-activate</code> migration
          capability if supported to avoid the issue.
        </dd></dl></li><li><dl><dt>
          vmx: Permit guests to have an odd number of vCPUs
        </dt><dd>
          An odd number of vCPUs greater than 1 was forbidden in the past,
          but current versions of ESXi have lifted that restriction.
        </dd></dl></li></ul></li></ul><h3><a id="v4.4.0"><strong>v4.4.0 (2018-06-04)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          bhyve: Support locking guest memory
        </dt><dd>
          Bhyve's guest memory may be wired using the
          <code>&lt;memoryBacking&gt;&lt;locked/&gt;&lt;/memoryBacking&gt;</code>
          element.
        </dd></dl></li><li><dl><dt>
          qemu: Provide VFIO channel I/O passthrough support
        </dt><dd>
          Support passthrough devices that use channel I/O based mechanism in
          a QEMU virtual machine.
        </dd></dl></li><li><dl><dt>
          qemu: Add support for migration of VMs with non-shared storage over TLS
        </dt><dd>
          It's now possible to use the VIR_MIGRATE_TLS flag together with
          VIR_MIGRATE_NON_SHARED_DISK. The connection is then secured using the
          TLS environment which is setup for the migration connection.
        </dd></dl></li><li><dl><dt>
          Add support for VM Generation ID
        </dt><dd>
          The VM Generatation ID exposes a 128-bit, cryptographically
          random, integer value identifier, referred to as a Globally
          Unique Identifier (GUID) to the guest in order to notify the
          guest operating system when the virtual machine is executed
          with a different configuration. Add a new domain XML processing
          and a domain capabilities feature.
        </dd></dl></li><li><dl><dt>
          Introduce virDomainDetachDeviceAlias
        </dt><dd>
          This new API enables users to detach device using only its alias.
        </dd></dl></li><li><dl><dt>
          Introduce new virConnectCompareHypervisorCPU and virConnectBaselineHypervisorCPU APIs
        </dt><dd>
          Unlike the old virConnectCompareCPU and virConnectBaselineCPU APIs,
          both new APIs consider capabilities of a specific hypervisor.
        </dd></dl></li><li><dl><dt>
          Introduce SCSI persistent reservations support
        </dt><dd>
          The QEMU driver gained support for qemu-pr-helper which enables
          guests to issue SCSI commands for persistent reservation.
        </dd></dl></li><li><dl><dt>
          qemu: Implement multiple screen support for virDomainScreenshot
        </dt><dd>
          While the virDomainScreenshot API supported multihead video cards,
          the implementation was missing. But now that QEMU implemented it
          libvirt has done as well.
        </dd></dl></li><li><dl><dt>
          qemu: add support for vhost-vsock-device
        </dt><dd>
          A new vsock device was introduced, allowing communication between
          the guest and the host via the AF_VSOCK family.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Add suport for OpenGL rendering with SDL
        </dt><dd>
          Domains using SDL as a graphics backend will now be able to use
          OpenGL accelerated rendering.
        </dd></dl></li><li><dl><dt>
          qemu: Add support for 'output' audio codec
        </dt><dd>
          Support QEMU's 'hda-output' codec advertising only a line-out for ich6
          and ich9 sound devices.
        </dd></dl></li><li><dl><dt>
          virsh: Enhance event name completion
        </dt><dd>
          Implement event name completion for some commands (e.g. event,
          secret-event, pool-event and nodedev-event)
        </dd></dl></li></ul></li></ul><h3><a id="v4.3.0"><strong>v4.3.0 (2018-05-02)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Add support for the pcie-to-pci-bridge controller
        </dt><dd>
          Pure PCIe guests such as x86_64/q35 and aarch64/virt will now
          add this controller when traditional PCI devices are in use.
        </dd></dl></li><li><dl><dt>
          Xen: Support setting CPU features for host-passthrough model
        </dt><dd>
          The CPU model presented to Xen HVM domains is equivalent to libvirt's
          host-passthrough model, although individual features can be enabled
          and disabled via the cpuid setting. The libvirt libxl driver now
          supports enabling and disabling individual features of the
          host-passthrough CPU model.
        </dd></dl></li></ul></li><li><strong>Removed features</strong><ul class="news-section-content"><li><dl><dt>
          Xen: Drop the legacy xend-based driver
        </dt><dd>
          The xm/xend toolstack was deprecated in Xen 4.2 and removed
          from the Xen sources in the 4.5 development cycle. The libvirt
          driver based on xend is now removed from the libvirt sources.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Support hot plug and hot unplug of mediated devices
        </dt><dd>
          Libvirt now allows mediated devices to be hot plugged and hot
          unplugged from a guest rather than reporting an error that this isn't
          supported. In fact, kernel has been supporting this since 4.10.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          Improve handling of device mapper targets
        </dt><dd>
          When starting a domain with a disk backed by a device
          mapper volume libvirt also needs to allow the storage
          backing the device mapper in CGroups. In the past
          kernel did not care, but starting from 4.16 CGroups are
          consulted on each access to the device mapper target.
        </dd></dl></li></ul></li></ul><h3><a id="v4.2.0"><strong>v4.2.0 (2018-04-01)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          Support building with Python 3
        </dt><dd>
          Python is required to build libvirt, and up until now only Python 2
          could be used as an interpreter. All scripts used during build have
          now been made compatible with Python 3, which means both major
          releases of the language are fully supported.
        </dd></dl></li><li><dl><dt>
          qemu: Provide ccw address support for graphics and input devices
        </dt><dd>
          Support the virtio-gpu-ccw device as a video device and
          virtio-{keyboard, mouse, tablet}-ccw devices as input devices
          on S390.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Add logging of guest crash information on S390
        </dt><dd>
          On S390, when the guest crashes and QEMU exposes the guest crash
          information, log the relevant data to the domain log file.
        </dd></dl></li><li><dl><dt>
          qemu: use arp table of host to get the IP address of guests
        </dt><dd>
          Find IP address of a VM by arp table on hosts.
          If someone customizing IP address inside VM, it will be helpful.
        </dd></dl></li><li><dl><dt>
          Xen: Remove hard-coded scheduler weight
        </dt><dd>
          The libxl driver was accidentally hard-coding the per-domain
          scheduler weight to 1000, silently ignoring any user-provided
          <code>&lt;shares&gt;</code> in <code>&lt;cputune&gt;</code>. The
          driver now honors <code>&lt;shares&gt;</code>, and defers setting
          a default value to Xen. Note that the Xen default is 256, so any
          domains started after this improvement will have one fourth the
          shares of previously started domains. If all domains must have
          equal CPU shares, administrators must manually set the weight of
          previously started domains to 256, or restart them.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          qemu: TLS migration now enforces use of TLS for the NBD connection
        </dt><dd>
          When the VIR_MIGRATE_TLS flag was used with the migration API libvirt
          did not ensure that the NBD connection was using TLS as well. The code
          now rejects such migration as the TLS transport for NBD is not ready
          yet, but prevents a false sense of security that TLS would be used.
          The support TLS for NBD will be added soon.
        </dd></dl></li></ul></li></ul><h3><a id="v4.1.0"><strong>v4.1.0 (2018-03-05)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          Added support for CAT (Cache allocation Technology)
        </dt><dd>
          Domain vCPU threads can now have allocated some parts of host cache
          using the <code>cachetune</code> element in <code>cputune</code>.
        </dd></dl></li><li><dl><dt>
          Allow opening secondary drivers
        </dt><dd>
          Up until now it was possible to connect to only hypervisor drivers
          (e.g. qemu:///system, lxc:///, vbox:///system, and so on). The
          internal drivers (like network driver, node device driver, etc.) were
          hidden from users and users could use them only indirectly. Starting
          with this release new connection URIs are accepted. For instance
          network:///system, storage:///system and so on.
        </dd></dl></li><li><dl><dt>
          virtlogd, virtlockd: Add support for admin protocol
        </dt><dd>
          These two daemons now support admin protocol through which some admin
          info can be gathered or some configuration tweaked on the fly.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          virsh: Enhance bash completion
        </dt><dd>
          Implement more bash completions so that basic libvirt
          objects can be auto-completed (e.g. networks,
          interfaces, NWFilters, and so on).
        </dd></dl></li><li><dl><dt>
          qemu: Use VIR_ERR_DEVICE_MISSING for various hotplug/detach messages
        </dt><dd/></dl></li><li><dl><dt>
          qemu: Allow showing the dump progress for memory only dump
        </dt><dd>
          Alter the QEMU dump-guest-memory command processing to check
          for and allow asynchronous completion which then allows for
          the virsh dump --memory-only --verbose command to display percent
          completion data.
        </dd></dl></li><li><dl><dt>
          conf: add support for setting Chassis SMBIOS data fields
        </dt><dd/></dl></li><li><dl><dt>
          libxl: add support for setting clock offset and adjustment
        </dt><dd/></dl></li><li><dl><dt>
          Make port allocator global
        </dt><dd>
          Up until now each driver had their own port allocator module. This
          meant that info on port usage was not shared. Starting with this
          release, the port allocator module is made global and therefore
          drivers allocate ports from global pool.
        </dd></dl></li><li><dl><dt>
          Fixed some compiler warnings that appear with GCC 8
        </dt><dd/></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Check for unsafe migration more thoroughly
        </dt><dd>
          If a domain disk is stored on local filesystem (e.g. ext4) but is
          not being migrated it is very likely that domain is not able to
          run on destination. Regardless of share/cache mode.
        </dd></dl></li><li><dl><dt>
          qemu: Fix updating device with boot order
        </dt><dd>
          Starting with 3.7.0 release updating any device with boot order would
          fail with 'boot order X is already used by another device' while in
          fact it was the very same device.
        </dd></dl></li><li><dl><dt>
          virlog: determine the hostname on startup CVE-2018-6764
        </dt><dd>
          At later point it might not be possible or even safe to use
          getaddrinfo(). It can in turn result in a load of NSS module which
          can even be loaded from unsage guest filesystem and thus escape the
          confinment of its container.
        </dd></dl></li><li><dl><dt>
          qemu: Rework vCPU statistics fetching
        </dt><dd>
          Fetching vCPU statistics was very expensive because it lead to waking
          up vCPU threads in QEMU and thus it degraded performance. The code
          was reworked so that fetching statistics does not wake up halted
          vCPUs.
        </dd></dl></li><li><dl><dt>
          qemu: unlink memory backing file on domain shutdown
        </dt><dd>
          Depending on the filesystem where domain memory is stored, some files
          might have been left behind. This is not a problem on hugetlbfs, but
          it is a problem on regular filesystems like ext4.
        </dd></dl></li><li><dl><dt>
          qemu: Fix shutting down domains in parallel
        </dt><dd>
          If multiple domains were being shut down in parallel, libvirtd might
          have deadlocked.
        </dd></dl></li><li><dl><dt>
          nodedev: Update PCI mdev capabilities dynamically
        </dt><dd>
          PCI devices may have other nested capabilities, like SRIOV and mdev
          which depend on the device being plugged into the native vendor
          driver. However, in case such a device is directly assigned to a guest
          using VFIO driver, the device will naturally lose these capabilities
          and libvirt needs to reflect that.
        </dd></dl></li></ul></li></ul><h3><a id="v4.0.0"><strong>v4.0.0 (2018-01-19)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          tools: Provide bash completion support
        </dt><dd>
          Both <code>virsh</code> and <code>virt-admin</code> now implement
          basic bash completion support.
        </dd></dl></li><li><dl><dt>
          qemu: Refresh capabilities on host microcode update
        </dt><dd>
          A microcode update can cause the CPUID bits to change; therefore,
          the capabilities cache should be rebuilt when such an update is
          detected on the host.
        </dd></dl></li><li><dl><dt>
          lxc: Set hostname based on container name
        </dt><dd/></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          CPU frequency reporting improvements
        </dt><dd>
          The CPU frequency will now be reported by <code>virsh nodeinfo</code>
          and other tools for s390 hosts; at the same time; CPU frequency has
          been disabled on aarch64 hosts because there's no way to detect it
          reliably.
        </dd></dl></li><li><dl><dt>
          libxl: Mark domain0 as persistent
        </dt><dd/></dl></li><li><dl><dt>
          Xen: Add support for multiple IP addresses on interface devices
        </dt><dd/></dl></li><li><dl><dt>
          qemu: Add support for hot unplugging redirdev device
        </dt><dd/></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Enforce vCPU hotplug granularity constraints
        </dt><dd>
          QEMU 2.7 and newer don't allow guests to start unless the initial
          vCPUs count is a multiple of the vCPU hotplug granularity, so
          validate it and report an error if needed.
        </dd></dl></li></ul></li></ul><h3><a id="v3.10.0"><strong>v3.10.0 (2017-12-04)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          conf: Support defining distances between virtual NUMA cells
        </dt><dd>
          A NUMA hardware architecture supports the notion of distances
          between NUMA cells. This can now be specified using the
          <code>&lt;distances&gt;</code> element within the NUMA cell
          configuration. Drivers which support this include Xen and QEMU.
        </dd></dl></li><li><dl><dt>
          Xen: Support defining vNUMA topology
        </dt><dd>
          Xen now supports defining a virtual NUMA topology for VMs,
          including specifying distances between NUMA cells.
        </dd></dl></li><li><dl><dt>
          qemu: Add the ability to configure HPT resizing for pSeries guests
        </dt><dd>
          The user can now decide whether HPT (Hash Page Table) resizing
          should be enabled, disabled or required instead of leaving it up to
          hypervisor defaults and negotiation between the guest and the host.
        </dd></dl></li><li><dl><dt>
          qemu: Add vmcoreinfo feature
        </dt><dd>
          Starting with QEMU 2.11, the guest can save kernel debug
          details when this feature is enabled and the kernel supports
          it. It is useful to process kernel dump with KASLR enabled,
          and also provides various kernel details to crash tools.
        </dd></dl></li><li><dl><dt>
          conf: Move the auth and encryption definitions to disk source
        </dt><dd>
          Allow parsing and formatting of the <code>auth</code> and
          <code>encryption</code> sub-elements to be a child of the
          <code>source</code> element. This will allow adding an
          <code>auth</code> sub-element to a <code>backingStore</code>
          or <code>mirror</code> elements as a means to track specific
          authentication and/or encryption needs.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          vbox: Add VirtualBox 5.2 support
        </dt><dd/></dl></li><li><dl><dt>
          vbox: Add support for configuring storage controllers
        </dt><dd>
          The VirtualBox driver now supports the <code>&lt;controller&gt;</code>
          element in the domain XML for configuring storage controllers in VBOX
          VMs.  Additionally, libvirt's domain XML schema was updated to allow
          optional <code>model</code> attribute for <code>&lt;controller
              type='ide'&gt;</code> which is used by the VBOX driver to set the
          IDE controller model to be one of 'piix4', 'piix4' (default), or
          'ich6'.  Finally, with this change <code>dumpxml</code> generates
          <code>&lt;controller&gt;</code> elements that correspond to current
          VBOX VM storage controller configuration.
        </dd></dl></li><li><dl><dt>
          vbox: Add support for attaching empty removable disks
        </dt><dd>
          The VirutalBox driver now supports adding CD-ROM and floppy disk
          devices that do not have the disk source specified. Previously such
          devices were silently ignored.
        </dd></dl></li><li><dl><dt>
          vbox: Add support for attaching SAS storage controllers
        </dt><dd>
          In VirtualBox, SCSI and SAS are distinct controller types whereas
          libvirt does not make such distinction. Therefore, the VBOX driver was
          updated to allow attaching SAS controllers via <code>&lt;controller
              type='scsi' model='lsisas1068'&gt;</code> element. If there are
          both SCSI and SAS controllers present in the VBOX VM, the domain XML
          can associate the disk device using the <code>&lt;address&gt;</code>
          element with the <code>controller</code> attribute, and optionally,
          set the port via <code>unit</code> attribute.
        </dd></dl></li><li><dl><dt>
          qemu: Generate predictable paths for qemu memory backends
        </dt><dd>
          In some cases management applications need to know
          paths passed to memory-backend-file objects upfront.
          Libvirt now generates predictable paths so applications
          can prepare the files if they need to do so.
        </dd></dl></li><li><dl><dt>
          Shareable disks work properly with recent qemu
        </dt><dd>
          Recent qemu versions added image locking to avoid potential corruption
          of disk images. This broke shareable disks with libvirt since the
          feature was turned on by default in qemu. Libvirt now enables sharing
          of those disks in qemu so that the image locking is not applied in
          that case. Additionally libvirt now checks that shareable disks have
          supported format (raw) to avoid metadata corruption.
        </dd></dl></li><li><dl><dt>
          Improve serial console behavior on non-x86 architectures
        </dt><dd>
          ppc64, aarch64 and s390x guests were treating the &lt;serial&gt;
          and &lt;console&gt; elements differently from x86, in some cases
          presenting misleading information to the user. The behavior is now
          consistent across all architectures and the information reported
          is always accurate.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          vbox: Do not ignore failures to attach disk devices when defining
        </dt><dd>
          The <code>define</code> now fails and reports an error if any of the
          <code>controller</code> or <code>disk</code> devices specified in the
          domain XML fail to attach to the VirtualBox VM.
        </dd></dl></li><li><dl><dt>
          vbox: Fix dumpxml to always output disk devices
        </dt><dd>
          The VirtualBox driver was ignoring any disk devices in
          <code>dumpxml</code> output if there was a SAS storage controller
          attached to the VM.
        </dd></dl></li><li><dl><dt>
          vbox: Fix dumpxml to always generate valid domain XML
        </dt><dd>
          When a VirtualBox VM has multiple disks attached, each to a different
          storage controller that uses 'sd' prefix for block device names e.g.
          one disk attached to SATA and one to SCSI controller, it no longer
          generates XML where both would have 'sda' device name assigned.
          Instead it properly assigns 'sda' and 'sdb' to those disks in the
          order of appearance.
        </dd></dl></li><li><dl><dt>
          Securely pass iSCSI authentication data
        </dt><dd>
          Rather than supplying the authentication data as part of the
          iSCSI URL for a disk or host device, utilize the encrypted
          secret object to securely pass the authentication data.
        </dd></dl></li></ul></li></ul><h3><a id="v3.9.0"><strong>v3.9.0 (2017-11-02)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          Add capability to allow hot (un)plug of a domain watchdog device
        </dt><dd/></dl></li><li><dl><dt>
          Allow users to set device aliases
        </dt><dd>
          Users can set aliases to domain devices and thus identify them
          easily.
        </dd></dl></li><li><dl><dt>
          qemu: Support multiqueue for virtio-blk
        </dt><dd>
          Multiqueue support for <code>virtio-blk</code> has been available
          in QEMU ever since 2.7.0, and now libvirt guests can enable it.
        </dd></dl></li><li><dl><dt>
          Add virDomainSetLifecycleAction API
        </dt><dd>
          Provided a new API to allow dynamic guest lifecycle control for
          guest reactions to poweroff, restart, or crash type events related
          to the domain XML <code>on_poweroff</code>, <code>on_reboot</code>,
          and <code>on_crash</code> elements. The
          <code>virsh set-lifecycle-action</code> command was created to
          control the actions.
        </dd></dl></li><li><dl><dt>
          qemu: Allow cold(un)plugging and hot(un)plugging input devices
        </dt><dd/></dl></li><li><dl><dt>
          net: Implement QoS for vhostuser
        </dt><dd/></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          Allow a logical volume to be create using LUKS
        </dt><dd>
          A logical volume may be created using an <code>encryption</code>
          element using "luks" format. This does require a previously created
          <code>secret</code> to store the passphrase used to encrypt the
          volume Adding the volume to a domain can then either provide the
          secret or allow the consumer in the guest to provide the passphrase
          in order to decrypt the volume.
        </dd></dl></li><li><dl><dt>
          net: Ignore auto-generated MAC address when detaching an interface
        </dt><dd>
          If the MAC address has not been specified by the user, libvirt will
          try and fill in the gaps by generating one; however, for some error
          paths that led to some confusing error messages, so when an
          auto-generated MAC address is specified the error message will not
          include the auto-generated MAC.
        </dd></dl></li><li><dl><dt>
          net: Enable MAC address lookup for virDomainInterfaceStats
        </dt><dd/></dl></li><li><dl><dt>
          apparmor: Several improvements
        </dt><dd>
          Changes include permitting access to data about USB devices and
          <code>dnsmasq</code> instances, allowing spaces in guest names and
          many more.
        </dd></dl></li><li><dl><dt>
          cpu: Use CPU information obtained from QEMU when possible
        </dt><dd>
          Recent QEMU versions can expose information about which CPU models
          are available and usable on the host; libvirt will now make use of
          such information whenever possible.
        </dd></dl></li><li><dl><dt>
          hyperv: Various improvements
        </dt><dd>
          The error reported when clients can't connect to Hyper-V has been
          made more descriptive, and memory limits for guests are now mapped
          to more appropriate libvirt equivalents.
        </dd></dl></li><li><dl><dt>
          qemu: Report QEMU error on failed migration
        </dt><dd>
          Instead of reporting a generic error, ask QEMU for a more detailed
          and thus hopefully more helpful one.
        </dd></dl></li><li><dl><dt>
          vbox: Implement autoport for RDP
        </dt><dd>
          libvirt will now obtain the (dynamically allocated) RDP port number
          from VirtualBox itself, avoiding conflicts between multiple guests
          wanting to use RDP at the same time.
        </dd></dl></li><li><dl><dt>
          qemu: Allow rotation of small logs
        </dt><dd>
          On a host where numerous unique instances are executed per day, it's
          quite possible that, even though each of the single log files are
          fairly small, collectively the quantity and volume may add tens of
          thousands of log files to the <code>/var/log/libvirt/qemu/</code>
          directory. Removing the constraints that log have to be bigger than
          100 KiB before they can be rotated solves the issue.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          Fix swapped interface statistics and QoS
        </dt><dd>
          Due to internal implementation, reported statistics for
          some types of interfaces were swapped (RX appeared in
          TX and vice versa). Similarly, QoS was set in reversed
          way.
        </dd></dl></li><li><dl><dt>
          Properly resize local LUKS encrypted volume
        </dt><dd>
          Resizing of a local LUKS encrypted volume will now use qemu-img
          to resize the volume. This will require configuring a secret for
          the LUKS encrypted volume.
        </dd></dl></li><li><dl><dt>
          qemu: Reserve PCI addresses for implicit i440fx devices
        </dt><dd>
          Failing to do so causes the addresses to be considered usable by
          libvirt, which means they could be assigned to more than one device
          resulting in the guest failing to start.
        </dd></dl></li><li><dl><dt>
          spec: Restart libvirtd only at the end of the upgrade process
        </dt><dd>
          Use <code>%posttrans</code> to make sure <code>libvirtd</code>
          is not restarted before all other components, such as the library
          itself and storage / hypervisor drivers, have already been upgraded.
        </dd></dl></li></ul></li><li><strong>Security</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Ensure TLS clients always verify the server certificate
        </dt><dd>
          While it's reasonable to turn off client certificate validation,
          as setting it up can be non-trivial, clients should always verify
          the server certificate to avoid MITM attacks. However, libvirt was
          using the same knob to control both checks, leading to
          CVE-2017-1000256 / LSN-2017-0002.
        </dd></dl></li></ul></li></ul><h3><a id="v3.8.0"><strong>v3.8.0 (2017-10-04)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Added support for cold-(un)plug of watchdog devices
        </dt><dd/></dl></li><li><dl><dt>
          qemu: Added support for setting IP address os usernet interfaces
        </dt><dd/></dl></li><li><dl><dt>
          qemu: Added support for Veritas Hyperscale (VxHS) block devices
        </dt><dd/></dl></li><li><dl><dt>
          storage: Added new events for pool-build and pool-delete
        </dt><dd/></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Set DAC permissions properly for spice rendernode
        </dt><dd>
          When a <code>rendernode</code> path is set for SPICE GL on
          <code>qemu:///system</code>, we now correctly set DAC permissions
          on the device at VM startup. This is the last remaining hurdle to
          let SPICE GL work for <code>qemu:///system</code> without any
          external host changes.
        </dd></dl></li><li><dl><dt>
          nodedev: Add switchdev offload query to NIC capabilities
        </dt><dd>
            Allow querying the NIC interface capabilities for the
            availability of switchdev offloading (also known as
            kernel-forward-plane-offload).
        </dd></dl></li><li><dl><dt>
          New CPU models for AMD and Intel
        </dt><dd>
          AMD EPYC and Intel Skylake-Server CPU models were added together with
          their features
        </dd></dl></li><li><dl><dt>
          Improve long waiting when saving a domain
        </dt><dd>
          While waiting for a write to disk to be finished, e.g. during save,
          even simple operations like <code>virsh list</code> would be blocking
          due to domain lock. This is now resolved by unlocking the domain
          in places where it is not needed.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          Proper units are now used in virsh manpage for dom(mem)stats
        </dt><dd>
          Previously the documentation used multiples of 1000, but now it is
          fixed to use multiples of 1024.
        </dd></dl></li><li><dl><dt>
          qemu: Fix error reporting when disk attachment fails
        </dt><dd>
          There was a possibility for the actual error to be overridden or
          cleared during the rollback.
        </dd></dl></li><li><dl><dt>
          qemu: Fix assignment of graphics ports after daemon restart
        </dt><dd>
          This could be seen with newer kernels that have bug regarding
          SO_REUSEADDR. After libvirtd was restarted it could assign already
          used address to new guests which would make them fail to start. This
          is fixed by marking used ports unavailable when reconnecting to
          running QEMU domains.
        </dd></dl></li><li><dl><dt>
          Fix message decoding which was causing a very strange bug
        </dt><dd>
          When parsing an RPC message with file descriptors was interrupted and
          had to restart, the offset of the payload was calculated badly causing
          strange issues like not being able to find a domain that was not
          requested.
        </dd></dl></li></ul></li></ul><h3><a id="v3.7.0"><strong>v3.7.0 (2017-09-04)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Add managedsave-edit commands
        </dt><dd>
          Using managedsave-dumpxml, managedsave-define and managedsave-edit
          commands, now we can dump and edit the XML configuration of domain
          which has managedsave image.
        </dd></dl></li><li><dl><dt>
          qemu: Add migrate-getmaxdowntime command
        </dt><dd>
          Currently, the maximum tolerable downtime for a domain being migrated
          is write-only from libvirt, via migrate-setmaxdowntime. This
          implements a complementary migrate-getmaxdowntime command
        </dd></dl></li><li><dl><dt>
          bhyve: Support autoport for VNC ports
        </dt><dd>
          It's no longer necessary to explicitly specify VNC port for the bhyve
          guests. With the autoport feature it will be allocated automatically.
          Please refer to the bhyve driver documentation for examples.
        </dd></dl></li><li><dl><dt>
          qemu: Added support for setting heads of virtio GPU
        </dt><dd/></dl></li><li><dl><dt>
          qemu: Added support to configure reconnect timeout for chardev devices
        </dt><dd>
          When you have a TCP or UNIX chardev device and it's connected somewhere
          you can configure reconnect timeout if the connection is closed.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Report a clear error when dropping a VM during startup
        </dt><dd>
          "Failed to load config for domain 'DOMNAME'" is now reported if a VM
          config can't be parsed for some reason, and thus provides a clear
          indication for users (and devs).
        </dd></dl></li><li><dl><dt>
          apparmor: Update for QEMU 2.10 compatibility
        </dt><dd>
          Starting with QEMU 2.10, disk images and NVRAM files get
          automatically locked to prevent them from being corrupted; however,
          file locking needs to be explicitly allowed through
          <code>virt-aa-helper</code> or AppArmor will reject the requests and
          the guest will not be able to run.
        </dd></dl></li><li><dl><dt>
          virsh: List Unix sockets in 'domdisplay' output
        </dt><dd>
          VNC and SPICE graphics can use Unix sockets instead of TCP/IP sockets
          as connection endpoints, but such a configuration was not handled
          correctly by <code>virsh domdisplay</code>, causing the respective
          endpoints to be missing from the output.
        </dd></dl></li><li><dl><dt>
          qemu: Don't check whether offline migration is safe
        </dt><dd>
          Since offline migration only copies the guest definition to the
          destination host, data corruption is not a concern and the operation
          can always be performed safely.
        </dd></dl></li><li><dl><dt>
          virt-host-validate: Fix IOMMU detection on ppc64
        </dt><dd/></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Better support for international domain names (with wide characters)
        </dt><dd>
          There were some issues with multi-byte domains getting lost
          on daemon restart due to truncation, so the code now handles
          multi-byte names a bit better.
        </dd></dl></li><li><dl><dt>
          qemu: Support long domain names with namespaces
        </dt><dd>
          Domains with extremely long names would fail to start due to
          temporary namespace paths being created with the whole name.
          The path is now generated with shortened name instead.
        </dd></dl></li><li><dl><dt>
          qemu: Tolerate missing emulator binary during libvirtd restart
        </dt><dd>
          For some time libvirt required qemu capabilities being present when
          parsing VM configs during startup. As a side effect VM configs would
          fail to parse and thus vanish, if the emulator binary would be
          uninstalled or broken. Libvirt now tolerates when capabilities
          are missing during startup.
        </dd></dl></li><li><dl><dt>
          qemu: Prevent pSeries guests from disappearing in some situations
        </dt><dd>
          pSeries guest would disappear if any of the host devices they were
          configured to use was not available during libvirtd startup, which
          could easily happen for SR-IOV Virtual Functions. This scenario is
          now handled correctly.
        </dd></dl></li><li><dl><dt>
          qemu: Honor &lt;on_reboot/&gt; setting
        </dt><dd>
          The setting was accepted by the parser, but not actually implemented.
        </dd></dl></li><li><dl><dt>
          Fix --verbose option for all daemons
        </dt><dd>
          Since v3.0.0, the option had been ignored by all libvirt daemons
          (<code>libvirtd</code>, <code>virtlogd</code> and
          <code>virtlockd</code>); it's now working as intended once again.
        </dd></dl></li></ul></li></ul><h3><a id="v3.6.0"><strong>v3.6.0 (2017-08-02)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          hyperv: Implement virDomainSetMemory and virDomainSendKey APIs
        </dt><dd/></dl></li><li><dl><dt>
          qemu: Support multiple PHBs for pSeries guests
        </dt><dd>
          pSeries guests can now have multiple PHBs (PCI Host Bridges), which
          show up as separate PCI domains in the guest. To create additional
          PHBs, simply add PCI controllers with model <code>pci-root</code>
          to the guest configuration.
        </dd></dl></li><li><dl><dt>
          qemu: Isolate hostdevs on pSeries guests
        </dt><dd>
          To enable better error reporting and recovery, unrelated hostdevs
          will now be automatically isolated on pSeries guests by placing them
          on separate PHBs (PCI Host Bridges).
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          qemu: platform serial devices can now use chardev features
        </dt><dd>
          QEMU VMs that depend on platform serial devices can now use
          QEMU's <code>-chardev</code> option, which enables access to
          advanced features like log file configuration. This applies
          to the default serial devices for arm, aarch64, and some ppc
          configurations.
        </dd></dl></li><li><dl><dt>
          Require use of GCC 4.4 or Clang compilers
        </dt><dd>
          We only ever test libvirt with GCC or Clang (which
          provides a GCC compatible compilation environment).
          Between them, these compilers cover every supported
          operating system platform, including Windows.
        </dd></dl></li><li><dl><dt>
          qemu: shared disks with directsync cache should be safe for migration
        </dt><dd>
          At present shared disks can be migrated with either readonly or
          <code>cache=none</code>. But <code>cache=directsync</code> should be
          safe for migration, because both <code>cache=directsync</code> and
          <code>cache=none</code> don't use the host page cache, and
          <code>cache=direct</code> write through qemu block layer cache.
        </dd></dl></li><li><dl><dt>
          Handle hotplug change on VLAN configuration using OVS
        </dt><dd>
          Libvirt was taught to handle VLAN change for running OVS interface.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Use vCPU 'node-id' property and pass it back to qemu
        </dt><dd>
          vCPU properties gathered from query-hotpluggable-cpus need to be
          passed back to QEMU. As QEMU did not use the node-id property until
          now and libvirt forgot to pass it back properly (it was parsed but
          not passed around) we did not honor this.
        </dd></dl></li><li><dl><dt>
          Miscellaneous stream fixes
        </dt><dd>
          After introducing sparse stream features there were still some known
          bugs left. Those are fixed in this release.
        </dd></dl></li><li><dl><dt>
          qemu: Miscellaneous domain NS fixes
        </dt><dd>
          Libvirt starts qemu domains in separate Linux namespaces for a while
          now. However, there were still some bugs lingering. For instance
          libvirt did not know how to handle file based bind mounts.
        </dd></dl></li><li><dl><dt>
          Various CPU driver improvements
        </dt><dd>
          There were some minor bugs when using 'host-model' CPU.
        </dd></dl></li></ul></li></ul><h3><a id="v3.5.0"><strong>v3.5.0 (2017-07-04)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Add support for loadparm for a boot device
        </dt><dd>
          Add an optional boot parameter 'loadparm' for a boot device.
          Loadparm is an 8 byte parameter that, when present, is queried by
          S390 guests via sclp or diag 308. Linux guests on S390 use it to
          select a boot entry.
        </dd></dl></li><li><dl><dt>
          Support controlling how video devices are exposed to the bhyve guests
        </dt><dd>
          The <code>vgaconf</code> attribute was added to <code>video</code>'s
          <code>driver</code> element. Possible values are: <code>on</code>,
          <code>off</code>, and <code>io</code>. It controls the way how
          bhyve exposes video devices to its guests; various guest OSes might
          require different settings to boot properly.
        </dd></dl></li><li><dl><dt>
          qemu: Add support for live updates of coalesce settings
        </dt><dd>
          Users can now use <code>virsh update-device</code> to change
          the coalesce settings of an interfaces while the domain is
          running.
        </dd></dl></li><li><dl><dt>
          qemu: Allow VirtIO devices to use vIOMMU
        </dt><dd>
          It is now possible to turn on IOTBL for the vIOMMU and have VirtIO
          devices use it, provided they have been configured appropriately.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          qemu: block copy job can be used with persistent domains
        </dt><dd>
          Until now it was not possible to use block copy with persistent VMs.
          In use cases where it's not required to recover the job after VM
          shutdown, it's possible to specify VIR_DOMAIN_BLOCK_COPY_TRANSIENT_JOB
          flag to start the copy job.
        </dd></dl></li><li><dl><dt>
          JSON pseudo-protocol backing store parser supports new format of qemu 2.9
        </dt><dd>
          QEMU 2.9 modified a few structures corresponding to the JSON format
          of specifying a backing store for a disk image. Libvirt now implements
          the new format.
        </dd></dl></li><li><dl><dt>
          Capabilities now include info about host's CAT settings
        </dt><dd>
          Various information about resource control from the host is
          gathered and presented in capabilities if available.
        </dd></dl></li><li><dl><dt>
          apparmor: Several improvements
        </dt><dd>
          Allow access to Ceph config, EFI firmware on both x86_64 and
          aarch64, device tree on ppc64 and more.
        </dd></dl></li><li><dl><dt>
          qemu: Support host-model on POWER9 machines
        </dt><dd/></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          qemu: snapshot: retrieve image metadata from user provided files
        </dt><dd>
          Disk images of an external snapshot created with
          VIR_DOMAIN_SNAPSHOT_CREATE_REUSE_EXT flag specified would not be
          scanned for metadata after recent changes.

          The metadata is necessary to allow keeping relative paths between
          images when doing a block-commit.
        </dd></dl></li><li><dl><dt>
          Parse decimal numbers in a locale-independent way
        </dt><dd>
          Some locales, such as <code>de_DE</code> and <code>pt_BR</code>,
          use comma rather than dot to separate the integer part from the
          fractional part of a decimal number; however, several data sources
          such as the kernel use a locale-independent representation and need
          to be treated accordingly.
        </dd></dl></li><li><dl><dt>
          Support compilation with newer compiler and libc versions
        </dt><dd>
          Several fixes have been included to make compilation with Clang
          4.0.0, GCC 7.1 and glibc &gt;= 2.25.90 possible.
        </dd></dl></li><li><dl><dt>
          qemu: Query name for vhost-user interfaces at runtime
        </dt><dd>
          This makes it possible to use <code>virsh</code> subcommands such
          as <code>domiflist</code> and <code>domifstat</code> on vhost-user
          interfaces.
        </dd></dl></li><li><dl><dt>
          qemu: Set MTU for hotplugged interfaces correctly
        </dt><dd>
          When hotplugging a network interface, the MTU was only set on the
          guest side. Set it on the host side as well.
        </dd></dl></li><li><dl><dt>
          qemu: Forbid updating MTU for interfaces of running guests
        </dt><dd>
          The MTU setting can't be modified while the guest is running, so any
          attempt to alter it at runtime will now result in an error rather
          than being silently ignored.
        </dd></dl></li><li><dl><dt>
          qemu: Fix specifying QXL heads with older QEMU releases
        </dt><dd>
          Specifying the number of QXL heads was not working correctly for
          QEMU releases older than 1.6.
        </dd></dl></li><li><dl><dt>
          qemu: Fix migration to older libvirt/QEMU versions
        </dt><dd>
          When the guest is started, libvirt updates the CPU definition to
          reflect the actual CPU features to enforce ABI. We need to send
          original and updated CPU definition in order to support migration
          to older libvirt/QEMU versions. Only the updated CPU definition
          was sent to destination.
        </dd></dl></li></ul></li></ul><h3><a id="v3.4.0"><strong>v3.4.0 (2017-06-02)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          Improved streams to efficiently transfer sparseness
        </dt><dd>
          New extension to virStream was implemented so that
          virStorageVolDownload and virStorageVolUpload can preserve file
          sparseness.
        </dd></dl></li><li><dl><dt>
          I/O APIC type can be specified for QEMU/KVM domains
        </dt><dd>
          The <code>ioapic</code> tag was added to domain
          <code>features</code>, so the type of the I/O APIC can now
          be specified (e.g. putting it in userspace for KVM domains).
        </dd></dl></li><li><dl><dt>
          The reason for VM shutdown is reported, if known
        </dt><dd>
          QEMU 2.10 will be able to report the reason for shutting
          down (whether that was caused by the guest or not), and
          libvirt is prepared for that and reports that information in
          its shutdown event as well, if it is known.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          Repository now has new README.md file
        </dt><dd>
          The new file uses markdown syntax, so it looks better on
          github and possibly other web pages, but it has also more
          useful information. The old README is now symlink to the
          new file.
        </dd></dl></li><li><dl><dt>
          qemu: Use GICv2 by default for aarch64/virt TCG guests
        </dt><dd>
          The emulated GICv3 has some limitations that make it unusable as a
          default; use GICv2 until they're sorted out. This change makes it
          once again possible to run aarch64/virt guests on a x86_64 host
          without having to tweak their configuration.
        </dd></dl></li><li><dl><dt>
          Additional capabilities for the node_device module
        </dt><dd>
          Introduce two new capabilities to the node_device module. The first
          is for CCW devices, most common on the S390 architecture. The second
          is for fibre channel-backed SCSI devices and exposes the
          fc_remote_port sub-capability to SCSI target devices.
        </dd></dl></li><li><dl><dt>
          Node devices now report Mediated device capabilities
        </dt><dd>
          Endpoint devices support new <code>mdev</code> capability
          and their parents now report the supported types in new
          <code>mdev_types</code> capability.
        </dd></dl></li><li><dl><dt>
          Capabilities now report information about host caches
        </dt><dd>
          If supported in the kernel, host capabilities will now list
          L3 caches. The code for other levels was added as well, but
          only L3 caches are reported currently.
        </dd></dl></li><li><dl><dt>
          POWER9 CPU model was added
        </dt><dd>
          It is now properly reported in host capabilities.
        </dd></dl></li><li><dl><dt>
          libxl: NUMA sibling distances are now reported in host capabilities
        </dt><dd/></dl></li><li><dl><dt>
          VMDK version 3 files are now properly detected
        </dt><dd/></dl></li><li><dl><dt>
          Interrupt remapping and Extended interrupt mode for IOMMU devices
        </dt><dd>
          These two new features can now be controlled with new
          <code>&lt;driver intremap='on/off' eim='on/off'/&gt;</code>
          tag for <code>iommu</code> devices.
        </dd></dl></li><li><dl><dt>
          Graphics in libxl domains now have default addresses
        </dt><dd>
          Even though there were default addresses before this change,
          they were not saved in the XML. It is now possible to see
          and control the listen addresses properly.
        </dd></dl></li><li><dl><dt>
          Default USB controllers are now added for devices in libxl domains
        </dt><dd>
          Even though they were added automatically when USB device
          was attached, they could've been missing in some other
          cases. The logic is now fixed so there are always USB
          controllers, even if there was none of them in the specified
          XML.
        </dd></dl></li><li><dl><dt>
          Limits for RPC messages were increased
        </dt><dd>
          Hitting the RPC limits we have is easier every day, so they
          were increased once again and some guessing logic was
          improved as well. It is now possible to get more stats than
          ever using the <code>virConnectGetAllDomainStats()</code>
          call and push through even bigger requests and replies for
          all APIs.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Create memory_backing_dir on startup
        </dt><dd>
          Libvirt's policy is that directories are created on startup if
          they don't exist. We've missed this one.
        </dd></dl></li><li><dl><dt>
          PCIe 4.0 cards now report proper link speeds
        </dt><dd>
          It could happen that the link speed for PCIe devices was not
          properly reported or the nodedev-dumpxml just failed. That
          was due to mistake in the field width, but should now work
          properly.
        </dd></dl></li><li><dl><dt>
          qemu: Do not report errors on shutdown
        </dt><dd>
          For some users, in some rare cases, it could happen that
          there was an error message "internal error: End of file from
          qemu monitor" in the logs even though no problem happened.
          The detection of these false positives was improved and such
          errors should not show any more.
        </dd></dl></li><li><dl><dt>
          User-specified UNIX socket paths for virtio channels should not be reset
        </dt><dd>
          It could happen, in some cases, that libvirt would mistake a
          user-specified path for its own generated one and thus
          remove it from the XML. The detection of such addresses was
          improved now.
        </dd></dl></li><li><dl><dt>
          Fix address reservation during RNG hot-plug
        </dt><dd>
          When error occurred in a specific point in time during the
          hot-plug of an RNG device, it could happen that an address
          was released even though another device was already using
          it, making it possible to hot-plug another device with that
          address, effectively having duplicated addresses in the XML.
        </dd></dl></li></ul></li></ul><h3><a id="v3.3.0"><strong>v3.3.0 (2017-05-05)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          net: Add support for coalesce settings
        </dt><dd>
          Enabling data batching through these settings can improve network
          performance for guests.
        </dd></dl></li><li><dl><dt>
          qemu: Add support for guest CPU cache specification
        </dt><dd>
          This features allows fine-grained control of the cache behavior
          of the guest CPU.
        </dd></dl></li><li><dl><dt>
          qemu: Add support for the qemu-xhci USB controller
        </dt><dd/></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          hyperv: Support Hyper-V 2012 and newer
        </dt><dd>
          Starting with Hyper-V 2012 the API has changed causing the existing
          driver to be unable to send and process requests properly. This has
          been resolved by adding abstractions to handle the differences and
          ease handling such breaks if they happen in the future.
        </dd></dl></li><li><dl><dt>
          libxl: Add support for nested HVM domains
        </dt><dd>
          Xen has supported nested HVM domains since version 4.4. The
          libvirt libxl driver now supports nested HVM domains by
          specifying the host-passthrough CPU mode when defining a
          domain.
        </dd></dl></li><li><dl><dt>
          qemu: Implement ACPI support for aarch64 guests
        </dt><dd>
          Up until this point, ACPI support was only advertised for x86_64
          guests and disabling it for aarch64 guests was not possible at all.
        </dd></dl></li><li><dl><dt>
          vz: Add support for changing the number of vCPUs
        </dt><dd/></dl></li><li><dl><dt>
          qemu: Automatically choose the best USB controller for guests
        </dt><dd>
          The recently introduced qemu-xhci USB controller is the best choice
          for both ppc64 and aarch64 guests, so use it by default on those
          architectures if available.
        </dd></dl></li><li><dl><dt>
          daemon: Increase default task limit for libvirtd
        </dt><dd>
          The default number of tasks for the pids cgroup controller is 512,
          which libvirtd can quickly bump into when starting lots of guests.
          Raise the limit to a more reasonable 32768.
        </dd></dl></li><li><dl><dt>
          docs: Include man pages describing key code names and values
        </dt><dd/></dl></li><li><dl><dt>
          virsh: Report initialization errors
        </dt><dd>
          Sometimes virsh might be unable to start: when that happens, report
          useful diagnostics instead of failing silently.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          nss: Don't require a network restart for libvirt_guest
        </dt><dd>
          Previously, the libvirt_guest NSS module would only work properly
          after the corresponding network had been restarted; now newly
          started guests will be reported correctly right away.
        </dd></dl></li><li><dl><dt>
          storage: Remove unavailable transient pools after restart
        </dt><dd>
          Solve an issue where transient storage pools would be stuck in an
          unmanageable state if the source disappeared and libvirtd was
          subsequently restarted.
        </dd></dl></li><li><dl><dt>
          storage: Fix capacity value for LUKS encrypted volumes
        </dt><dd>
          The 'capacity' value (e.g. guest logical size) for a LUKS volume is
          smaller than the 'physical' value of the file in the file system, so
          we need to account for that.
        </dd></dl></li><li><dl><dt>
          qemu: Fix regression when hyperv/vendor_id feature is used
        </dt><dd>
          Guests using the feature would not be started at all; it is now
          possible to start them as expected.
        </dd></dl></li><li><dl><dt>
          qemu: Do not crash on USB address with no port and invalid bus
        </dt><dd/></dl></li><li><dl><dt>
          crypto: Always pad data before encrypting it
        </dt><dd>
          If this step is not performed, when the data length matches the
          chunk size the decryption routines will misinterpret the last byte
          of data as the padding length and fail to decode it correctly.
        </dd></dl></li></ul></li></ul><h3><a id="v3.2.0"><strong>v3.2.0 (2017-04-02)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          The virt-host-validate tool now supports bhyve hypervisor
        </dt><dd/></dl></li><li><dl><dt>
          Introduce NVDIMM memory model
        </dt><dd>
          NVDIMM is new type of memory introduced into QEMU 2.6. The idea is
          that we have a non-volatile memory module that keeps the data
          persistent across domain reboots and offers much faster data
          accesses. However, due to a bug in QEMU, this feature is not enabled
          for QEMUs older than 2.9.0.
        </dd></dl></li><li><dl><dt>
          qemu: Introduce support for generic PCIe Root Ports
        </dt><dd>
          For new controllers, a generic device (pcie-root-port) will be used
          by default instead of the Intel-specific device (ioh3420), provided
          the QEMU binary supports it.
        </dd></dl></li><li><dl><dt>
          qemu: Add support for checking guest CPU ABI compatibility
        </dt><dd>
          When migrating a domain to a different host, restoring a domain from
          a file or reverting a snapshot libvirt will make sure the guest CPU
          QEMU presents to the guest OS exactly matches the one provided on
          the source host (or before the domain's state was saved). This
          enhanced check may also be requested when starting a new domain to
          ensure the virtual CPU exactly matches the one specified in the XML.
        </dd></dl></li><li><dl><dt>
          qemu: Add support to migrate using TLS
        </dt><dd>
          Add the ability to migrate QEMU guests using TLS via a new flag
          VIR_MIGRATE_TLS or virsh migrate '--tls' option. Requires using at
          least QEMU 2.9.0 in order to work properly.
        </dd></dl></li><li><dl><dt>
          qemu: add mediated devices framework support
        </dt><dd>
          Recent kernel version introduced new mediated device framework, so
          provide an initial support of this framework for libvirt, mainly by
          introducing a new host device type in the XML.
        </dd></dl></li><li><dl><dt>
          qemu: Add support for setting TSC frequency
        </dt><dd>
          Setting TSC frequency is required to enable migration for domains
          with 'invtsc' CPU feature turned on.
        </dd></dl></li><li><dl><dt>
          Add support for block device threshold event
        </dt><dd>
          When using thin provisioning, management tools need to resize the
          disk in certain cases. To avoid having them to poll disk usage
          this version introduces an event which will be fired when a given
          offset of the storage is written by the hypervisor. Together with the
          API it allows registering thresholds for given storage backing
          volumes and this event will then notify management if the threshold
          is exceeded. Currently only the qemu driver supports this.
        </dd></dl></li><li><dl><dt>
           bhyve: Add support for UEFI boot ROM, VNC, and USB tablet
        </dt><dd>
          The bhyve driver now supports booting using the UEFI boot ROM,
          so non-FreeBSD guests that support UEFI could be booted without
          using an external boot loader like grub-bhyve. Video is also
          supported now, allowing to connect to guests via VNC and use
          an USB tablet as an input device. Please refer to
          the driver page for domain XML examples.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          qemu: Detect host CPU model by asking QEMU on x86_64
        </dt><dd>
          Previously, libvirt detected the host CPU model using CPUID
          instruction, which caused libvirt to detect a lot of CPU features
          that are not supported by QEMU/KVM. Asking QEMU makes sure we
          don't start it with unsupported features.
        </dd></dl></li><li><dl><dt>
          perf: Add more perf statistics
        </dt><dd>
          Add support to get the count of cpu clock time, task clock time,
          page faults, context switches, cpu migrations, minor page faults,
          major page faults, alignment faults, emulation faults by
          applications running on the platform.
        </dd></dl></li><li><dl><dt>
          Write hyperv crash information into vm log
        </dt><dd>
          qemu's implementation of the hyperv panic notifier now reports
          information about the crash from the guest os. Starting with this
          version, libvirt logs the information to the vm log file for possible
          debugging.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          QEMU: Use adaptive timeout for connecting to monitor
        </dt><dd>
          When starting qemu, libvirt waits for qemu to create the monitor
          socket which libvirt connects to. Historically, there was sharp 30
          second timeout after which the qemu process was killed. This
          approach is suboptimal as in some scenarios with huge amounts of
          guest RAM it can take a minute or more for kernel to allocate and
          zero out pages for qemu. The timeout is now flexible and computed by
          libvirt at domain startup.
        </dd></dl></li><li><dl><dt>
          Overwrite (clear) 2 KB instead of just 512 bytes when initializing logical device
        </dt><dd/></dl></li><li><dl><dt>
          Describe the logical backend requirements better for pool-create-as
        </dt><dd/></dl></li></ul></li></ul><h3><a id="v3.1.0"><strong>v3.1.0 (2017-03-03)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          storage: Add Virtuozzo storage backend storage pool
        </dt><dd>
          Add new storage backend to support pool and volume management
          within the Virtuozzo Storage environment. Virtuozzo Storage is
          a highly available distributed software defined storage with
          built-in replication and disaster recovery.
        </dd></dl></li><li><dl><dt>
          qemu: Add support for memory backing with file source
        </dt><dd>
          Add support in numa topology for file source inside memory backing
          (hugepages are not needed) Three new elements
          &lt;source/&gt;,&lt;access/&gt; and &lt;allocation/&gt; were added
          to &lt;memoryBacking/&gt; element. Also new configuration parameter
          <code>memory_backing_dir</code> was added to qemu.conf.
        </dd></dl></li><li><dl><dt>
          network: make openvswitch call timeout configurable
        </dt><dd>
          Adding the ability to specify the timeout value in seconds for
          openvswitch calls in the libvirtd configuration file.
        </dd></dl></li><li><dl><dt>
          bhyve: add e1000 NIC support
        </dt><dd>
          Add support for e1000 NIC. Previously, the only available option
          was <code>virtio-net</code>.
        </dd></dl></li><li><dl><dt>
          libxl: add tunneled migration support
        </dt><dd>
          Add tunneled migration to libxl driver, which is always capable of
          strong encryption and doesn't require any extra network connection
          other than what's required for remote access of libvirtd.
        </dd></dl></li><li><dl><dt>
          qemu: add rendernode argument
        </dt><dd>
          Add a new attribute 'rendernode' to &lt;gl&gt; spice element.
        </dd></dl></li><li><dl><dt>
          nodedev: add drm capability
        </dt><dd>
          Add a new 'drm' capability for Direct Rendering Manager (DRM)
          devices, providing device type information.
        </dd></dl></li><li><dl><dt>
          Add API for individual/specific vCPU hotplug
        </dt><dd>
          The new API allows selecting specific vCPUs to be added/removed from
          the VM. The existing APIs allowed only adding/removing from the end
          which did not play well with NUMA.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
           virsh: pool-list: allow both --uuid and --name in one command
        </dt><dd>
          Adjust the virsh-pool command to support the --uuid and/or --name
          options in order to print just the --name and/or --uuid of pools.
        </dd></dl></li><li><dl><dt>
          Introduce MTU to domain &lt;interface/&gt; and &lt;network&gt;
        </dt><dd>
          Allow setting MTU size for some types of domain interface
          and network.
        </dd></dl></li><li><dl><dt>
          libxl: improve support for &lt;timer&gt; configurations
        </dt><dd>
          Add support for multiple timers. Extend the tsc timer to
          support the emulate mode. Improve conversion of timer XML
          to/from xl.cfg.
        </dd></dl></li><li><dl><dt>
          storage: modularize the storage driver
        </dt><dd>
          Split up the storage driver backends into loadable modules so that
          binary distributions don't have to compromise on shipping the storage
          driver with all backends which may pull in too many dependencies.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          nodedev: Fabric name must not be required for fc_host capability
        </dt><dd>
          fabric_name is one of many fc_host attributes in Linux that is
          optional and left to the low-level driver to decide if it is
          implemented. For example the zfcp device driver does not provide a
          fabric name for an fcp host. The requirement for the existence of
          a fabric name has been removed by making it optional.
        </dd></dl></li><li><dl><dt>
          bhyve: change address allocation schema for SATA disks
        </dt><dd>
          Previously, the bhyve driver assigned PCI addresses to SATA disks
          directly rather than assigning that to a controller and
          using SATA addresses for disks. It was implemented this way
          because bhyve has no notion of an explicit SATA controller.
          However, as this doesn't match libvirt's understanding of
          disk addresses, the bhyve driver was changed to follow
          the common schema and have PCI addresses for SATA controllers
          and SATA addresses for disks. If you're having issues
          because of this, it's recommended to edit the domain's XML
          and remove &lt;address type='pci'&gt; from the &lt;disk&gt;
          elements with &lt;target bus='sata'/&gt; and let libvirt
          regenerate it properly.
        </dd></dl></li><li><dl><dt>
          libxl: maximum memory fixes
        </dt><dd>
          Fix reporting of domain maximum memory. Fix setting dom0
          maximum memory.
        </dd></dl></li><li><dl><dt>
          libxl: fix disk detach when &lt;driver&gt; not specified
        </dt><dd/></dl></li><li><dl><dt>
          libxl: fix dom0 autoballooning with Xen 4.8
        </dt><dd/></dl></li><li><dl><dt>
          qemu: Allow empty script path to &lt;interface/&gt;
        </dt><dd>
          Historically, this was always allowed. Unfortunately, due to some
          rework done for 1.3.2 release a bug was dragged in which suddenly
          stop allowing domain with such configuration to start.
        </dd></dl></li></ul></li></ul><h3><a id="v3.0.0"><strong>v3.0.0 (2017-01-17)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          Domain events for metadata content changes
        </dt><dd>
          The domain events framework has a new event ID that can
          be used to get notifications when domain metadata content
          changes.
        </dd></dl></li><li><dl><dt>
          Event notifications for the secret object
        </dt><dd>
          The secret object now supports event notifications, covering
          lifcycle changes and secret value changes.
        </dd></dl></li><li><dl><dt>
          New localPtr attribute for "ip" element in network XML
        </dt><dd/></dl></li><li><dl><dt>
          qemu: Support QEMU group I/O throttling
        </dt><dd>
          Add the capability to allow group I/O throttling via a new
          domain &lt;disk&gt; &lt;iotune&gt; subelement "group_name"
          to allow sharing I/O throttling quota between multiple drives.
        </dd></dl></li><li><dl><dt>
          nss: Introduce libvirt_guest
        </dt><dd>
          New <code>libvirt_guest</code> nss module that translates libvirt
          guest names into IP addresses.
        </dd></dl></li><li><dl><dt>
          daemon: Add support for runtime logging settings adjustment
        </dt><dd>
          Logging-related settings like log outputs and filters can now be
          adjusted during runtime using the admin interface without the
          necessity of the daemon's restart.
        </dd></dl></li><li><dl><dt>
          storage: Add virStorageVolInfoFlags API
        </dt><dd>
          Add the API to support using the VIR_STORAGE_VOL_GET_PHYSICAL
          flag in order to return the host physical size in bytes
          of the image container in the allocation field of the
          _virStorageVolInfo structure. The --physical flag has been
          added to the virsh vol-info command to access the data.
        </dd></dl></li><li><dl><dt>
          libxl: Implement virDomainGetMaxVcpus API
        </dt><dd/></dl></li><li><dl><dt>
          storage: Add overwrite flag checking for logical pool
        </dt><dd>
          Add support for the OVERWRITE flags for the logical storage
          backend including checking for existing data on the target
          volumes when building a new logical pool on target volume(s).
        </dd></dl></li><li><dl><dt>
          qemu: Add support for guest CPU configuration on s390(x)
        </dt><dd/></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          perf: Add more perf statistics
        </dt><dd>
          Add support to get the count of branch instructions
          executed, branch misses, bus cycles, stalled frontend
          cpu cycles, stalled backend cpu cycles, and ref cpu
          cycles by applications running on the platform.
        </dd></dl></li><li><dl><dt>
          conf: Display &lt;physical&gt; for volume xml
        </dt><dd>
          Add a display of the &lt;physical&gt; size of a disk
          volume in the output of the volume XML.
        </dd></dl></li><li><dl><dt>
          qemu: Use virtio-pci by default for aarch64 mach-virt guests
        </dt><dd>
          virtio-pci provides several advantages over virtio-mmio, such
          as the ability to hotplug devices and improved performance.
          While opting in to virtio-pci has been possible for a while,
          newly-defined guests will now use it automatically.
        </dd></dl></li><li><dl><dt>
          vbox: remove support for VirtualBox 3.x and older
        </dt><dd>
          Those old VirtualBox versions have been unsupported by
          upstream for a long time and the API of 4.0 and newer has
          diverged enough to require code abstractions to handle differences.
          Removing support for those old versions drops lots of code from
          the driver and simplifies the logic to ease implementation of new
          features going forward.
        </dd></dl></li><li><dl><dt>
          virsh: pool-info: introduce option --bytes
        </dt><dd>
          Add option --bytes to virsh pool-info in order ti allow display
          of units in bytes rather than default of human readable output.
        </dd></dl></li><li><dl><dt>
          scsi: Add parent wwnn/wwpn or fabric capability for createVport
        </dt><dd>
          Improve the algorithm searching for the parent scsi_host device
          for vHBA/NPIV scsi_host creation. Rather than supplying the
          "parent" by name, it's now possible to define the parent by
          it's wwnn/wwpn or fabric_wwn in the node device create XML or
          the storage pool XML.
        </dd></dl></li><li><dl><dt>
          qemu: aggregate pcie-root-ports onto multiple functions of a slot
        </dt><dd>
          When pcie-root-ports are added to pcie-root in order to
          provide a place to connect PCI Express endpoint devices,
          libvirt now aggregates multiple root ports together onto the
          same slot (up to 8 per slot) in order to conserve slots.
          Using this method, it's possible to connect more than 200
          endpoint devices to a guest that uses PCIe without requiring
          setup of any PCIe switches.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          lxc: fix accidental killing of containers during libvirtd restart
        </dt><dd>
          The libvirt_lxc process was previously not moved into the
          container scope. As a result, if systemd reloads its config
          after a container is started, when libvirtd is later restarted
          it will accidentally kill the containers.
        </dd></dl></li><li><dl><dt>
          qemu: Correct GetBlockInfo values
        </dt><dd>
          For an active domain, correct the physical value provided for
          a raw sparse file backed storage and the allocation value provided
          for a qcow2 file backed storage that hasn't yet been opened on
          the domain.
        </dd></dl></li><li><dl><dt>
          qemu: Make virtio console usable on ppc64 guests
        </dt><dd>
          The chardev detection code has been improved and can now handle this
          configuration properly.
        </dd></dl></li><li><dl><dt>
          qemu: Enable mount namespace
        </dt><dd>
          To avoid funny races with udev relabelling devices under our hands and
          to enhance security, libvirt now spawns each qemu process with its own
          <code>/dev</code>.
        </dd></dl></li><li><dl><dt>
          storage: Fix implementation of no-overwrite for file system backend
        </dt><dd>
          Fix file system storage backend implementation of the OVERWRITE
          flags to be consistent between code and documentation. Add checks
          to ensure that when building a new file system on a target volume
          that there is not something already on the disk in a format that
          libvirt can recognize.
        </dd></dl></li><li><dl><dt>
          qemu: Create hugepage path on per domain basis
        </dt><dd>
          Historically, all hugepage enabled domains shared the same path under
          hugetlbfs. This left libvirt unable to correctly set security labels
          on it. With this release, however, each domain is put into a
          separate path which is also correctly labeled.
        </dd></dl></li><li><dl><dt>
          conf: Reject domains with duplicate drive addresses
        </dt><dd>
          Reject duplicate drive addresses for disks and hostdevs at
          domain definition.
        </dd></dl></li><li><dl><dt>
          libxl: reverse defaults on HVM net device attach
        </dt><dd>
          Fixes network interface attach for HVM domains when no model is
          specified. Emulated hotplug isn't yet supported and hence we should
          default to the general working scenario.
        </dd></dl></li><li><dl><dt>
          libxl: always enable pae for x86_64 HVM
        </dt><dd>
          By default pae is disabled in libxl. Without an explicit &lt;pae/&gt;
          setting in the domain &lt;features&gt; configuration, an x86_64 HVM
          domain would be get an i686 environment. pae should always be enabled
          for x86_64 HVM domains.
        </dd></dl></li><li><dl><dt>
          qemu: Fix XML dump of autogenerated websocket
        </dt><dd>
          As a result autogenerated websocket port is regenerated on domain restore,
          migration and such as it should be.
        </dd></dl></li></ul></li></ul><h3><a id="v2.5.0"><strong>v2.5.0 (2016-12-04)</strong></a></h3><ul><li><strong>New features</strong><ul class="news-section-content"><li><dl><dt>
          shmem: Add support for additional models
        </dt><dd>
          The shmem device can now utilize QEMU's ivshmem-plain and
          ivshmem-doorbell, more modern versions of ivshmem.
        </dd></dl></li><li><dl><dt>
          vbox: Add VirtualBox 5.1 support
        </dt><dd/></dl></li><li><dl><dt>
          libssh: New transport
        </dt><dd>
          The new libssh transport allows one to connect to a running
          libvirtd via SSH, using the libssh library; for example:
          <code>qemu+libssh://server/system</code>.
        </dd></dl></li><li><dl><dt>
          vhost-scsi: Add support scsi_host hostdev passthrough
        </dt><dd>
          Add the capability to pass through a scsi_host HBA and the
          associated LUNs to the guest.
        </dd></dl></li><li><dl><dt>
          Allow debugging of gluster volumes in qemu
        </dt><dd>
          Users can now enable debug logging for native gluster
          volumes in qemu using the "gluster_debug_level" option in qemu.conf
        </dd></dl></li><li><dl><dt>
          Pre-allocate memory slots for memory hotplug
        </dt><dd>
          Slot numbers for memory devices are now automatically allocated and
          thus persistent. In addition slot numbers can be specified without
          providing a base address, which simplifies user configuration
        </dd></dl></li><li><dl><dt>
          qemu: Express devices will be placed on PCIe bus by default
        </dt><dd>
          For machine types that use a PCI Express root bus
          (e.g. x86_64/Q35 and aarch64/virt), any unaddressed PCI
          device that is an Express device (all virtio-1.0 devices,
          e1000e, nec-xhci, vfio assigned devices) will be placed on
          an Express controller (i.e. a pcie-root-port) instead of a
          legacy PCI controller (i.e. pci-bridge) with the root ports
          added as needed.
        </dd></dl></li></ul></li><li><strong>Improvements</strong><ul class="news-section-content"><li><dl><dt>
          docs: Better documentation for migration APIs and flags
        </dt><dd/></dl></li><li><dl><dt>
          vbox: Address thread safety issues
        </dt><dd/></dl></li><li><dl><dt>
          virsh: Add support for passing an alternative persistent XML to migrate command
        </dt><dd/></dl></li><li><dl><dt>
          vhostuser: Allow hotplug of multiqueue devices
        </dt><dd/></dl></li><li><dl><dt>
          NEWS: Switch to an improved format
        </dt><dd>
          List user-visible changes instead of single commits for a better
          high-level overview of differences between libvirt releases.
        </dd></dl></li><li><dl><dt>
          website: Modernize layout and branding
        </dt><dd>
          The libvirt website looked very cluttered and outdated; it has now
          been completely overhauled, resulting in a design that's better
          organized and more pleasant to look at.
        </dd></dl></li></ul></li><li><strong>Bug fixes</strong><ul class="news-section-content"><li><dl><dt>
          vz: Fix migration in P2P mode
        </dt><dd/></dl></li><li><dl><dt>
          Forbid newline character in names of some libvirt objects
        </dt><dd/></dl></li><li><dl><dt>
          Fix compilation on macOS
        </dt><dd/></dl></li></ul></li></ul><p>Older libvirt releases didn't have proper release notes,
        and as such are not included in this page: if you're looking
        for information about them, start from those made in
        <a href="news-2016.html">2016</a> and work your way back.</p></body>
</html>
