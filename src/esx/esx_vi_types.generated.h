/* Generated by esx_vi_generator.py */



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Enum: ManagedEntityStatus
 */

enum _esxVI_ManagedEntityStatus {
    esxVI_ManagedEntityStatus_Undefined = 0,
    esxVI_ManagedEntityStatus_Gray,
    esxVI_ManagedEntityStatus_Green,
    esxVI_ManagedEntityStatus_Yellow,
    esxVI_ManagedEntityStatus_Red,
};

int esxVI_ManagedEntityStatus_CastFromAnyType(esxVI_AnyType *anyType, esxVI_ManagedEntityStatus *item);
int esxVI_ManagedEntityStatus_Serialize(esxVI_ManagedEntityStatus item, const char *element, virBufferPtr output);
int esxVI_ManagedEntityStatus_Deserialize(xmlNodePtr node, esxVI_ManagedEntityStatus *item);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Enum: ObjectUpdateKind
 */

enum _esxVI_ObjectUpdateKind {
    esxVI_ObjectUpdateKind_Undefined = 0,
    esxVI_ObjectUpdateKind_Modify,
    esxVI_ObjectUpdateKind_Enter,
    esxVI_ObjectUpdateKind_Leave,
};

int esxVI_ObjectUpdateKind_Serialize(esxVI_ObjectUpdateKind item, const char *element, virBufferPtr output);
int esxVI_ObjectUpdateKind_Deserialize(xmlNodePtr node, esxVI_ObjectUpdateKind *item);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Enum: PerfStatsType
 */

enum _esxVI_PerfStatsType {
    esxVI_PerfStatsType_Undefined = 0,
    esxVI_PerfStatsType_Absolute,
    esxVI_PerfStatsType_Delta,
    esxVI_PerfStatsType_Rate,
};

int esxVI_PerfStatsType_Serialize(esxVI_PerfStatsType item, const char *element, virBufferPtr output);
int esxVI_PerfStatsType_Deserialize(xmlNodePtr node, esxVI_PerfStatsType *item);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Enum: PerfSummaryType
 */

enum _esxVI_PerfSummaryType {
    esxVI_PerfSummaryType_Undefined = 0,
    esxVI_PerfSummaryType_Average,
    esxVI_PerfSummaryType_Maximum,
    esxVI_PerfSummaryType_Minimum,
    esxVI_PerfSummaryType_Latest,
    esxVI_PerfSummaryType_Summation,
    esxVI_PerfSummaryType_None,
};

int esxVI_PerfSummaryType_Serialize(esxVI_PerfSummaryType item, const char *element, virBufferPtr output);
int esxVI_PerfSummaryType_Deserialize(xmlNodePtr node, esxVI_PerfSummaryType *item);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Enum: PropertyChangeOp
 */

enum _esxVI_PropertyChangeOp {
    esxVI_PropertyChangeOp_Undefined = 0,
    esxVI_PropertyChangeOp_Add,
    esxVI_PropertyChangeOp_Remove,
    esxVI_PropertyChangeOp_Assign,
    esxVI_PropertyChangeOp_IndirectRemove,
};

int esxVI_PropertyChangeOp_Serialize(esxVI_PropertyChangeOp item, const char *element, virBufferPtr output);
int esxVI_PropertyChangeOp_Deserialize(xmlNodePtr node, esxVI_PropertyChangeOp *item);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Enum: SharesLevel
 */

enum _esxVI_SharesLevel {
    esxVI_SharesLevel_Undefined = 0,
    esxVI_SharesLevel_Low,
    esxVI_SharesLevel_Normal,
    esxVI_SharesLevel_High,
    esxVI_SharesLevel_Custom,
};

int esxVI_SharesLevel_Serialize(esxVI_SharesLevel item, const char *element, virBufferPtr output);
int esxVI_SharesLevel_Deserialize(xmlNodePtr node, esxVI_SharesLevel *item);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Enum: TaskInfoState
 */

enum _esxVI_TaskInfoState {
    esxVI_TaskInfoState_Undefined = 0,
    esxVI_TaskInfoState_Queued,
    esxVI_TaskInfoState_Running,
    esxVI_TaskInfoState_Success,
    esxVI_TaskInfoState_Error,
};

int esxVI_TaskInfoState_CastFromAnyType(esxVI_AnyType *anyType, esxVI_TaskInfoState *item);
int esxVI_TaskInfoState_Serialize(esxVI_TaskInfoState item, const char *element, virBufferPtr output);
int esxVI_TaskInfoState_Deserialize(xmlNodePtr node, esxVI_TaskInfoState *item);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Enum: VirtualMachineMovePriority
 */

enum _esxVI_VirtualMachineMovePriority {
    esxVI_VirtualMachineMovePriority_Undefined = 0,
    esxVI_VirtualMachineMovePriority_LowPriority,
    esxVI_VirtualMachineMovePriority_HighPriority,
    esxVI_VirtualMachineMovePriority_DefaultPriority,
};

int esxVI_VirtualMachineMovePriority_Serialize(esxVI_VirtualMachineMovePriority item, const char *element, virBufferPtr output);
int esxVI_VirtualMachineMovePriority_Deserialize(xmlNodePtr node, esxVI_VirtualMachineMovePriority *item);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Enum: VirtualMachinePowerState
 */

enum _esxVI_VirtualMachinePowerState {
    esxVI_VirtualMachinePowerState_Undefined = 0,
    esxVI_VirtualMachinePowerState_PoweredOff,
    esxVI_VirtualMachinePowerState_PoweredOn,
    esxVI_VirtualMachinePowerState_Suspended,
};

int esxVI_VirtualMachinePowerState_CastFromAnyType(esxVI_AnyType *anyType, esxVI_VirtualMachinePowerState *item);
int esxVI_VirtualMachinePowerState_Serialize(esxVI_VirtualMachinePowerState item, const char *element, virBufferPtr output);
int esxVI_VirtualMachinePowerState_Deserialize(xmlNodePtr node, esxVI_VirtualMachinePowerState *item);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: AboutInfo
 */

struct _esxVI_AboutInfo {
    esxVI_AboutInfo *_unused;                              /* optional */
    esxVI_Type _type;                                      /* required */

    char *name;                                            /* required */
    char *fullName;                                        /* required */
    char *vendor;                                          /* required */
    char *version;                                         /* required */
    char *build;                                           /* required */
    char *localeVersion;                                   /* optional */
    char *localeBuild;                                     /* optional */
    char *osType;                                          /* required */
    char *productLineId;                                   /* required */
    char *apiType;                                         /* required */
    char *apiVersion;                                      /* required */
};

int esxVI_AboutInfo_Alloc(esxVI_AboutInfo **item);
void esxVI_AboutInfo_Free(esxVI_AboutInfo **item);
int esxVI_AboutInfo_Validate(esxVI_AboutInfo *item);
int esxVI_AboutInfo_Serialize(esxVI_AboutInfo *item, const char *element, virBufferPtr output);
int esxVI_AboutInfo_Deserialize(xmlNodePtr node, esxVI_AboutInfo **item);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: ChoiceOption
 *          extends OptionType
 */

struct _esxVI_ChoiceOption {
    esxVI_ChoiceOption *_unused;                           /* optional */
    esxVI_Type _type;                                      /* required */

    /* OptionType */
    esxVI_Boolean valueIsReadonly;                         /* optional */

    /* ChoiceOption */
    esxVI_ElementDescription *choiceInfo;                  /* required, list */
    esxVI_Int *defaultIndex;                               /* optional */
};

int esxVI_ChoiceOption_Alloc(esxVI_ChoiceOption **item);
void esxVI_ChoiceOption_Free(esxVI_ChoiceOption **item);
int esxVI_ChoiceOption_Validate(esxVI_ChoiceOption *item);
int esxVI_ChoiceOption_Serialize(esxVI_ChoiceOption *item, const char *element, virBufferPtr output);
int esxVI_ChoiceOption_Deserialize(xmlNodePtr node, esxVI_ChoiceOption **item);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: Description
 *          extended by ElementDescription
 */

struct _esxVI_Description {
    esxVI_Description *_next;                              /* optional */
    esxVI_Type _type;                                      /* required */

    char *label;                                           /* required */
    char *summary;                                         /* required */
};

int esxVI_Description_Alloc(esxVI_Description **item);
void esxVI_Description_Free(esxVI_Description **item);
int esxVI_Description_Validate(esxVI_Description *item);
int esxVI_Description_AppendToList(esxVI_Description **list, esxVI_Description *item);
int esxVI_Description_Serialize(esxVI_Description *item, const char *element, virBufferPtr output);
int esxVI_Description_SerializeList(esxVI_Description *list, const char *element, virBufferPtr output);
int esxVI_Description_Deserialize(xmlNodePtr node, esxVI_Description **item);
int esxVI_Description_DeserializeList(xmlNodePtr node, esxVI_Description **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: DynamicProperty
 */

struct _esxVI_DynamicProperty {
    esxVI_DynamicProperty *_next;                          /* optional */
    esxVI_Type _type;                                      /* required */

    char *name;                                            /* required */
    esxVI_AnyType *val;                                    /* required */
};

int esxVI_DynamicProperty_Alloc(esxVI_DynamicProperty **item);
void esxVI_DynamicProperty_Free(esxVI_DynamicProperty **item);
int esxVI_DynamicProperty_Validate(esxVI_DynamicProperty *item);
int esxVI_DynamicProperty_AppendToList(esxVI_DynamicProperty **list, esxVI_DynamicProperty *item);
int esxVI_DynamicProperty_DeepCopy(esxVI_DynamicProperty **dst, esxVI_DynamicProperty *src);
int esxVI_DynamicProperty_DeepCopyList(esxVI_DynamicProperty **dstList, esxVI_DynamicProperty *srcList);
int esxVI_DynamicProperty_Deserialize(xmlNodePtr node, esxVI_DynamicProperty **item);
int esxVI_DynamicProperty_DeserializeList(xmlNodePtr node, esxVI_DynamicProperty **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: ElementDescription
 *          extends Description
 */

struct _esxVI_ElementDescription {
    esxVI_ElementDescription *_next;                       /* optional */
    esxVI_Type _type;                                      /* required */

    /* Description */
    char *label;                                           /* required */
    char *summary;                                         /* required */

    /* ElementDescription */
    char *key;                                             /* required */
};

int esxVI_ElementDescription_Alloc(esxVI_ElementDescription **item);
void esxVI_ElementDescription_Free(esxVI_ElementDescription **item);
int esxVI_ElementDescription_Validate(esxVI_ElementDescription *item);
int esxVI_ElementDescription_AppendToList(esxVI_ElementDescription **list, esxVI_ElementDescription *item);
int esxVI_ElementDescription_Serialize(esxVI_ElementDescription *item, const char *element, virBufferPtr output);
int esxVI_ElementDescription_SerializeList(esxVI_ElementDescription *list, const char *element, virBufferPtr output);
int esxVI_ElementDescription_Deserialize(xmlNodePtr node, esxVI_ElementDescription **item);
int esxVI_ElementDescription_DeserializeList(xmlNodePtr node, esxVI_ElementDescription **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: Event
 */

struct _esxVI_Event {
    esxVI_Event *_next;                                    /* optional */
    esxVI_Type _type;                                      /* required */

    esxVI_Int *key;                                        /* required */
    esxVI_Int *chainId;                                    /* required */
    esxVI_DateTime *createdTime;                           /* required */
    char *userName;                                        /* required */
    /* FIXME: datacenter is currently ignored */
    /* FIXME: computeResource is currently ignored */
    /* FIXME: host is currently ignored */
    /* FIXME: vm is currently ignored */
    char *fullFormattedMessage;                            /* optional */
};

int esxVI_Event_Alloc(esxVI_Event **item);
void esxVI_Event_Free(esxVI_Event **item);
int esxVI_Event_Validate(esxVI_Event *item);
int esxVI_Event_AppendToList(esxVI_Event **list, esxVI_Event *item);
int esxVI_Event_Serialize(esxVI_Event *item, const char *element, virBufferPtr output);
int esxVI_Event_SerializeList(esxVI_Event *list, const char *element, virBufferPtr output);
int esxVI_Event_Deserialize(xmlNodePtr node, esxVI_Event **item);
int esxVI_Event_DeserializeList(xmlNodePtr node, esxVI_Event **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: HostCpuIdInfo
 */

struct _esxVI_HostCpuIdInfo {
    esxVI_HostCpuIdInfo *_next;                            /* optional */
    esxVI_Type _type;                                      /* required */

    esxVI_Int *level;                                      /* required */
    char *vendor;                                          /* optional */
    char *eax;                                             /* optional */
    char *ebx;                                             /* optional */
    char *ecx;                                             /* optional */
    char *edx;                                             /* optional */
};

int esxVI_HostCpuIdInfo_Alloc(esxVI_HostCpuIdInfo **item);
void esxVI_HostCpuIdInfo_Free(esxVI_HostCpuIdInfo **item);
int esxVI_HostCpuIdInfo_Validate(esxVI_HostCpuIdInfo *item);
int esxVI_HostCpuIdInfo_AppendToList(esxVI_HostCpuIdInfo **list, esxVI_HostCpuIdInfo *item);
int esxVI_HostCpuIdInfo_CastFromAnyType(esxVI_AnyType *anyType, esxVI_HostCpuIdInfo **item);
int esxVI_HostCpuIdInfo_CastListFromAnyType(esxVI_AnyType *anyType, esxVI_HostCpuIdInfo **list);
int esxVI_HostCpuIdInfo_Serialize(esxVI_HostCpuIdInfo *item, const char *element, virBufferPtr output);
int esxVI_HostCpuIdInfo_SerializeList(esxVI_HostCpuIdInfo *list, const char *element, virBufferPtr output);
int esxVI_HostCpuIdInfo_Deserialize(xmlNodePtr node, esxVI_HostCpuIdInfo **item);
int esxVI_HostCpuIdInfo_DeserializeList(xmlNodePtr node, esxVI_HostCpuIdInfo **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: ObjectContent
 */

struct _esxVI_ObjectContent {
    esxVI_ObjectContent *_next;                            /* optional */
    esxVI_Type _type;                                      /* required */

    esxVI_ManagedObjectReference *obj;                     /* required */
    esxVI_DynamicProperty *propSet;                        /* optional, list */
    /* FIXME: missingSet is currently ignored */
};

int esxVI_ObjectContent_Alloc(esxVI_ObjectContent **item);
void esxVI_ObjectContent_Free(esxVI_ObjectContent **item);
int esxVI_ObjectContent_Validate(esxVI_ObjectContent *item);
int esxVI_ObjectContent_AppendToList(esxVI_ObjectContent **list, esxVI_ObjectContent *item);
int esxVI_ObjectContent_DeepCopy(esxVI_ObjectContent **dst, esxVI_ObjectContent *src);
int esxVI_ObjectContent_DeepCopyList(esxVI_ObjectContent **dstList, esxVI_ObjectContent *srcList);
int esxVI_ObjectContent_Deserialize(xmlNodePtr node, esxVI_ObjectContent **item);
int esxVI_ObjectContent_DeserializeList(xmlNodePtr node, esxVI_ObjectContent **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: ObjectSpec
 */

struct _esxVI_ObjectSpec {
    esxVI_ObjectSpec *_next;                               /* optional */
    esxVI_Type _type;                                      /* required */

    esxVI_ManagedObjectReference *obj;                     /* required */
    esxVI_Boolean skip;                                    /* optional */
    esxVI_SelectionSpec *selectSet;                        /* optional, list */
};

int esxVI_ObjectSpec_Alloc(esxVI_ObjectSpec **item);
void esxVI_ObjectSpec_Free(esxVI_ObjectSpec **item);
int esxVI_ObjectSpec_Validate(esxVI_ObjectSpec *item);
int esxVI_ObjectSpec_AppendToList(esxVI_ObjectSpec **list, esxVI_ObjectSpec *item);
int esxVI_ObjectSpec_Serialize(esxVI_ObjectSpec *item, const char *element, virBufferPtr output);
int esxVI_ObjectSpec_SerializeList(esxVI_ObjectSpec *list, const char *element, virBufferPtr output);
int esxVI_ObjectSpec_Deserialize(xmlNodePtr node, esxVI_ObjectSpec **item);
int esxVI_ObjectSpec_DeserializeList(xmlNodePtr node, esxVI_ObjectSpec **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: ObjectUpdate
 */

struct _esxVI_ObjectUpdate {
    esxVI_ObjectUpdate *_next;                             /* optional */
    esxVI_Type _type;                                      /* required */

    esxVI_ObjectUpdateKind kind;                           /* required */
    esxVI_ManagedObjectReference *obj;                     /* required */
    esxVI_PropertyChange *changeSet;                       /* optional, list */
    /* FIXME: missingSet is currently ignored */
};

int esxVI_ObjectUpdate_Alloc(esxVI_ObjectUpdate **item);
void esxVI_ObjectUpdate_Free(esxVI_ObjectUpdate **item);
int esxVI_ObjectUpdate_Validate(esxVI_ObjectUpdate *item);
int esxVI_ObjectUpdate_AppendToList(esxVI_ObjectUpdate **list, esxVI_ObjectUpdate *item);
int esxVI_ObjectUpdate_Deserialize(xmlNodePtr node, esxVI_ObjectUpdate **item);
int esxVI_ObjectUpdate_DeserializeList(xmlNodePtr node, esxVI_ObjectUpdate **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: OptionType
 *          extended by ChoiceOption
 */

struct _esxVI_OptionType {
    esxVI_OptionType *_unused;                             /* optional */
    esxVI_Type _type;                                      /* required */

    esxVI_Boolean valueIsReadonly;                         /* optional */
};

int esxVI_OptionType_Alloc(esxVI_OptionType **item);
void esxVI_OptionType_Free(esxVI_OptionType **item);
int esxVI_OptionType_Validate(esxVI_OptionType *item);
int esxVI_OptionType_Serialize(esxVI_OptionType *item, const char *element, virBufferPtr output);
int esxVI_OptionType_Deserialize(xmlNodePtr node, esxVI_OptionType **item);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: PerfCounterInfo
 */

struct _esxVI_PerfCounterInfo {
    esxVI_PerfCounterInfo *_next;                          /* optional */
    esxVI_Type _type;                                      /* required */

    esxVI_Int *key;                                        /* required */
    esxVI_ElementDescription *nameInfo;                    /* required */
    esxVI_ElementDescription *groupInfo;                   /* required */
    esxVI_ElementDescription *unitInfo;                    /* required */
    esxVI_PerfSummaryType rollupType;                      /* required */
    esxVI_PerfStatsType statsType;                         /* required */
    esxVI_Int *level;                                      /* optional */
    esxVI_Int *associatedCounterId;                        /* optional, list */
};

int esxVI_PerfCounterInfo_Alloc(esxVI_PerfCounterInfo **item);
void esxVI_PerfCounterInfo_Free(esxVI_PerfCounterInfo **item);
int esxVI_PerfCounterInfo_Validate(esxVI_PerfCounterInfo *item);
int esxVI_PerfCounterInfo_AppendToList(esxVI_PerfCounterInfo **list, esxVI_PerfCounterInfo *item);
int esxVI_PerfCounterInfo_Serialize(esxVI_PerfCounterInfo *item, const char *element, virBufferPtr output);
int esxVI_PerfCounterInfo_SerializeList(esxVI_PerfCounterInfo *list, const char *element, virBufferPtr output);
int esxVI_PerfCounterInfo_Deserialize(xmlNodePtr node, esxVI_PerfCounterInfo **item);
int esxVI_PerfCounterInfo_DeserializeList(xmlNodePtr node, esxVI_PerfCounterInfo **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: PerfEntityMetric
 *          extends PerfEntityMetricBase
 */

struct _esxVI_PerfEntityMetric {
    esxVI_PerfEntityMetric *_next;                         /* optional */
    esxVI_Type _type;                                      /* required */

    /* PerfEntityMetricBase */
    esxVI_ManagedObjectReference *entity;                  /* required */

    /* PerfEntityMetric */
    esxVI_PerfSampleInfo *sampleInfo;                      /* optional, list */
    esxVI_PerfMetricSeries *value;                         /* optional, list */
};

int esxVI_PerfEntityMetric_Alloc(esxVI_PerfEntityMetric **item);
void esxVI_PerfEntityMetric_Free(esxVI_PerfEntityMetric **item);
int esxVI_PerfEntityMetric_Validate(esxVI_PerfEntityMetric *item);
esxVI_PerfEntityMetric *esxVI_PerfEntityMetric_DynamicCast(void *item);
int esxVI_PerfEntityMetric_AppendToList(esxVI_PerfEntityMetric **list, esxVI_PerfEntityMetric *item);
int esxVI_PerfEntityMetric_Serialize(esxVI_PerfEntityMetric *item, const char *element, virBufferPtr output);
int esxVI_PerfEntityMetric_SerializeList(esxVI_PerfEntityMetric *list, const char *element, virBufferPtr output);
int esxVI_PerfEntityMetric_Deserialize(xmlNodePtr node, esxVI_PerfEntityMetric **item);
int esxVI_PerfEntityMetric_DeserializeList(xmlNodePtr node, esxVI_PerfEntityMetric **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: PerfEntityMetricBase
 *          extended by PerfEntityMetric
 */

struct _esxVI_PerfEntityMetricBase {
    esxVI_PerfEntityMetricBase *_next;                     /* optional */
    esxVI_Type _type;                                      /* required */

    esxVI_ManagedObjectReference *entity;                  /* required */
};

int esxVI_PerfEntityMetricBase_Alloc(esxVI_PerfEntityMetricBase **item);
void esxVI_PerfEntityMetricBase_Free(esxVI_PerfEntityMetricBase **item);
int esxVI_PerfEntityMetricBase_Validate(esxVI_PerfEntityMetricBase *item);
esxVI_PerfEntityMetricBase *esxVI_PerfEntityMetricBase_DynamicCast(void *item);
int esxVI_PerfEntityMetricBase_AppendToList(esxVI_PerfEntityMetricBase **list, esxVI_PerfEntityMetricBase *item);
int esxVI_PerfEntityMetricBase_Serialize(esxVI_PerfEntityMetricBase *item, const char *element, virBufferPtr output);
int esxVI_PerfEntityMetricBase_SerializeList(esxVI_PerfEntityMetricBase *list, const char *element, virBufferPtr output);
int esxVI_PerfEntityMetricBase_Deserialize(xmlNodePtr node, esxVI_PerfEntityMetricBase **item);
int esxVI_PerfEntityMetricBase_DeserializeList(xmlNodePtr node, esxVI_PerfEntityMetricBase **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: PerfMetricId
 */

struct _esxVI_PerfMetricId {
    esxVI_PerfMetricId *_next;                             /* optional */
    esxVI_Type _type;                                      /* required */

    esxVI_Int *counterId;                                  /* required */
    char *instance;                                        /* required */
};

int esxVI_PerfMetricId_Alloc(esxVI_PerfMetricId **item);
void esxVI_PerfMetricId_Free(esxVI_PerfMetricId **item);
int esxVI_PerfMetricId_Validate(esxVI_PerfMetricId *item);
int esxVI_PerfMetricId_AppendToList(esxVI_PerfMetricId **list, esxVI_PerfMetricId *item);
int esxVI_PerfMetricId_Serialize(esxVI_PerfMetricId *item, const char *element, virBufferPtr output);
int esxVI_PerfMetricId_SerializeList(esxVI_PerfMetricId *list, const char *element, virBufferPtr output);
int esxVI_PerfMetricId_Deserialize(xmlNodePtr node, esxVI_PerfMetricId **item);
int esxVI_PerfMetricId_DeserializeList(xmlNodePtr node, esxVI_PerfMetricId **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: PerfMetricIntSeries
 *          extends PerfMetricSeries
 */

struct _esxVI_PerfMetricIntSeries {
    esxVI_PerfMetricIntSeries *_next;                      /* optional */
    esxVI_Type _type;                                      /* required */

    /* PerfMetricSeries */
    esxVI_PerfMetricId *id;                                /* required */

    /* PerfMetricIntSeries */
    esxVI_Long *value;                                     /* optional, list */
};

int esxVI_PerfMetricIntSeries_Alloc(esxVI_PerfMetricIntSeries **item);
void esxVI_PerfMetricIntSeries_Free(esxVI_PerfMetricIntSeries **item);
int esxVI_PerfMetricIntSeries_Validate(esxVI_PerfMetricIntSeries *item);
esxVI_PerfMetricIntSeries *esxVI_PerfMetricIntSeries_DynamicCast(void *item);
int esxVI_PerfMetricIntSeries_AppendToList(esxVI_PerfMetricIntSeries **list, esxVI_PerfMetricIntSeries *item);
int esxVI_PerfMetricIntSeries_Serialize(esxVI_PerfMetricIntSeries *item, const char *element, virBufferPtr output);
int esxVI_PerfMetricIntSeries_SerializeList(esxVI_PerfMetricIntSeries *list, const char *element, virBufferPtr output);
int esxVI_PerfMetricIntSeries_Deserialize(xmlNodePtr node, esxVI_PerfMetricIntSeries **item);
int esxVI_PerfMetricIntSeries_DeserializeList(xmlNodePtr node, esxVI_PerfMetricIntSeries **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: PerfMetricSeries
 *          extended by PerfMetricIntSeries
 */

struct _esxVI_PerfMetricSeries {
    esxVI_PerfMetricSeries *_next;                         /* optional */
    esxVI_Type _type;                                      /* required */

    esxVI_PerfMetricId *id;                                /* required */
};

int esxVI_PerfMetricSeries_Alloc(esxVI_PerfMetricSeries **item);
void esxVI_PerfMetricSeries_Free(esxVI_PerfMetricSeries **item);
int esxVI_PerfMetricSeries_Validate(esxVI_PerfMetricSeries *item);
esxVI_PerfMetricSeries *esxVI_PerfMetricSeries_DynamicCast(void *item);
int esxVI_PerfMetricSeries_AppendToList(esxVI_PerfMetricSeries **list, esxVI_PerfMetricSeries *item);
int esxVI_PerfMetricSeries_Serialize(esxVI_PerfMetricSeries *item, const char *element, virBufferPtr output);
int esxVI_PerfMetricSeries_SerializeList(esxVI_PerfMetricSeries *list, const char *element, virBufferPtr output);
int esxVI_PerfMetricSeries_Deserialize(xmlNodePtr node, esxVI_PerfMetricSeries **item);
int esxVI_PerfMetricSeries_DeserializeList(xmlNodePtr node, esxVI_PerfMetricSeries **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: PerfQuerySpec
 */

struct _esxVI_PerfQuerySpec {
    esxVI_PerfQuerySpec *_next;                            /* optional */
    esxVI_Type _type;                                      /* required */

    esxVI_ManagedObjectReference *entity;                  /* required */
    esxVI_DateTime *startTime;                             /* optional */
    esxVI_DateTime *endTime;                               /* optional */
    esxVI_Int *maxSample;                                  /* optional */
    esxVI_PerfMetricId *metricId;                          /* optional, list */
    esxVI_Int *intervalId;                                 /* optional */
    char *format;                                          /* optional */
};

int esxVI_PerfQuerySpec_Alloc(esxVI_PerfQuerySpec **item);
void esxVI_PerfQuerySpec_Free(esxVI_PerfQuerySpec **item);
int esxVI_PerfQuerySpec_Validate(esxVI_PerfQuerySpec *item);
int esxVI_PerfQuerySpec_AppendToList(esxVI_PerfQuerySpec **list, esxVI_PerfQuerySpec *item);
int esxVI_PerfQuerySpec_Serialize(esxVI_PerfQuerySpec *item, const char *element, virBufferPtr output);
int esxVI_PerfQuerySpec_SerializeList(esxVI_PerfQuerySpec *list, const char *element, virBufferPtr output);
int esxVI_PerfQuerySpec_Deserialize(xmlNodePtr node, esxVI_PerfQuerySpec **item);
int esxVI_PerfQuerySpec_DeserializeList(xmlNodePtr node, esxVI_PerfQuerySpec **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: PerfSampleInfo
 */

struct _esxVI_PerfSampleInfo {
    esxVI_PerfSampleInfo *_next;                           /* optional */
    esxVI_Type _type;                                      /* required */

    esxVI_DateTime *timestamp;                             /* required */
    esxVI_Int *interval;                                   /* required */
};

int esxVI_PerfSampleInfo_Alloc(esxVI_PerfSampleInfo **item);
void esxVI_PerfSampleInfo_Free(esxVI_PerfSampleInfo **item);
int esxVI_PerfSampleInfo_Validate(esxVI_PerfSampleInfo *item);
int esxVI_PerfSampleInfo_AppendToList(esxVI_PerfSampleInfo **list, esxVI_PerfSampleInfo *item);
int esxVI_PerfSampleInfo_Serialize(esxVI_PerfSampleInfo *item, const char *element, virBufferPtr output);
int esxVI_PerfSampleInfo_SerializeList(esxVI_PerfSampleInfo *list, const char *element, virBufferPtr output);
int esxVI_PerfSampleInfo_Deserialize(xmlNodePtr node, esxVI_PerfSampleInfo **item);
int esxVI_PerfSampleInfo_DeserializeList(xmlNodePtr node, esxVI_PerfSampleInfo **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: PropertyChange
 */

struct _esxVI_PropertyChange {
    esxVI_PropertyChange *_next;                           /* optional */
    esxVI_Type _type;                                      /* required */

    char *name;                                            /* required */
    esxVI_PropertyChangeOp op;                             /* required */
    esxVI_AnyType *val;                                    /* optional */
};

int esxVI_PropertyChange_Alloc(esxVI_PropertyChange **item);
void esxVI_PropertyChange_Free(esxVI_PropertyChange **item);
int esxVI_PropertyChange_Validate(esxVI_PropertyChange *item);
int esxVI_PropertyChange_AppendToList(esxVI_PropertyChange **list, esxVI_PropertyChange *item);
int esxVI_PropertyChange_Deserialize(xmlNodePtr node, esxVI_PropertyChange **item);
int esxVI_PropertyChange_DeserializeList(xmlNodePtr node, esxVI_PropertyChange **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: PropertyFilterSpec
 */

struct _esxVI_PropertyFilterSpec {
    esxVI_PropertyFilterSpec *_next;                       /* optional */
    esxVI_Type _type;                                      /* required */

    esxVI_PropertySpec *propSet;                           /* required, list */
    esxVI_ObjectSpec *objectSet;                           /* required, list */
};

int esxVI_PropertyFilterSpec_Alloc(esxVI_PropertyFilterSpec **item);
void esxVI_PropertyFilterSpec_Free(esxVI_PropertyFilterSpec **item);
int esxVI_PropertyFilterSpec_Validate(esxVI_PropertyFilterSpec *item);
int esxVI_PropertyFilterSpec_AppendToList(esxVI_PropertyFilterSpec **list, esxVI_PropertyFilterSpec *item);
int esxVI_PropertyFilterSpec_Serialize(esxVI_PropertyFilterSpec *item, const char *element, virBufferPtr output);
int esxVI_PropertyFilterSpec_SerializeList(esxVI_PropertyFilterSpec *list, const char *element, virBufferPtr output);
int esxVI_PropertyFilterSpec_Deserialize(xmlNodePtr node, esxVI_PropertyFilterSpec **item);
int esxVI_PropertyFilterSpec_DeserializeList(xmlNodePtr node, esxVI_PropertyFilterSpec **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: PropertyFilterUpdate
 */

struct _esxVI_PropertyFilterUpdate {
    esxVI_PropertyFilterUpdate *_next;                     /* optional */
    esxVI_Type _type;                                      /* required */

    esxVI_ManagedObjectReference *filter;                  /* required */
    esxVI_ObjectUpdate *objectSet;                         /* optional, list */
    /* FIXME: missingSet is currently ignored */
};

int esxVI_PropertyFilterUpdate_Alloc(esxVI_PropertyFilterUpdate **item);
void esxVI_PropertyFilterUpdate_Free(esxVI_PropertyFilterUpdate **item);
int esxVI_PropertyFilterUpdate_Validate(esxVI_PropertyFilterUpdate *item);
int esxVI_PropertyFilterUpdate_AppendToList(esxVI_PropertyFilterUpdate **list, esxVI_PropertyFilterUpdate *item);
int esxVI_PropertyFilterUpdate_Deserialize(xmlNodePtr node, esxVI_PropertyFilterUpdate **item);
int esxVI_PropertyFilterUpdate_DeserializeList(xmlNodePtr node, esxVI_PropertyFilterUpdate **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: PropertySpec
 */

struct _esxVI_PropertySpec {
    esxVI_PropertySpec *_next;                             /* optional */
    esxVI_Type _type;                                      /* required */

    char *type;                                            /* required */
    esxVI_Boolean all;                                     /* optional */
    esxVI_String *pathSet;                                 /* optional, list */
};

int esxVI_PropertySpec_Alloc(esxVI_PropertySpec **item);
void esxVI_PropertySpec_Free(esxVI_PropertySpec **item);
int esxVI_PropertySpec_Validate(esxVI_PropertySpec *item);
int esxVI_PropertySpec_AppendToList(esxVI_PropertySpec **list, esxVI_PropertySpec *item);
int esxVI_PropertySpec_Serialize(esxVI_PropertySpec *item, const char *element, virBufferPtr output);
int esxVI_PropertySpec_SerializeList(esxVI_PropertySpec *list, const char *element, virBufferPtr output);
int esxVI_PropertySpec_Deserialize(xmlNodePtr node, esxVI_PropertySpec **item);
int esxVI_PropertySpec_DeserializeList(xmlNodePtr node, esxVI_PropertySpec **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: ResourceAllocationInfo
 */

struct _esxVI_ResourceAllocationInfo {
    esxVI_ResourceAllocationInfo *_unused;                 /* optional */
    esxVI_Type _type;                                      /* required */

    esxVI_Long *reservation;                               /* optional */
    esxVI_Boolean expandableReservation;                   /* optional */
    esxVI_Long *limit;                                     /* optional */
    esxVI_SharesInfo *shares;                              /* optional */
    esxVI_Long *overheadLimit;                             /* optional */
};

int esxVI_ResourceAllocationInfo_Alloc(esxVI_ResourceAllocationInfo **item);
void esxVI_ResourceAllocationInfo_Free(esxVI_ResourceAllocationInfo **item);
int esxVI_ResourceAllocationInfo_Validate(esxVI_ResourceAllocationInfo *item);
int esxVI_ResourceAllocationInfo_Serialize(esxVI_ResourceAllocationInfo *item, const char *element, virBufferPtr output);
int esxVI_ResourceAllocationInfo_Deserialize(xmlNodePtr node, esxVI_ResourceAllocationInfo **item);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: ResourcePoolResourceUsage
 */

struct _esxVI_ResourcePoolResourceUsage {
    esxVI_ResourcePoolResourceUsage *_unused;              /* optional */
    esxVI_Type _type;                                      /* required */

    esxVI_Long *reservationUsed;                           /* required */
    esxVI_Long *reservationUsedForVm;                      /* required */
    esxVI_Long *unreservedForPool;                         /* required */
    esxVI_Long *unreservedForVm;                           /* required */
    esxVI_Long *overallUsage;                              /* required */
    esxVI_Long *maxUsage;                                  /* required */
};

int esxVI_ResourcePoolResourceUsage_Alloc(esxVI_ResourcePoolResourceUsage **item);
void esxVI_ResourcePoolResourceUsage_Free(esxVI_ResourcePoolResourceUsage **item);
int esxVI_ResourcePoolResourceUsage_Validate(esxVI_ResourcePoolResourceUsage *item);
int esxVI_ResourcePoolResourceUsage_CastFromAnyType(esxVI_AnyType *anyType, esxVI_ResourcePoolResourceUsage **item);
int esxVI_ResourcePoolResourceUsage_Serialize(esxVI_ResourcePoolResourceUsage *item, const char *element, virBufferPtr output);
int esxVI_ResourcePoolResourceUsage_Deserialize(xmlNodePtr node, esxVI_ResourcePoolResourceUsage **item);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: SelectionSpec
 *          extended by TraversalSpec
 */

struct _esxVI_SelectionSpec {
    esxVI_SelectionSpec *_next;                            /* optional */
    esxVI_Type _type;                                      /* required */

    char *name;                                            /* optional */
};

int esxVI_SelectionSpec_Alloc(esxVI_SelectionSpec **item);
void esxVI_SelectionSpec_Free(esxVI_SelectionSpec **item);
int esxVI_SelectionSpec_Validate(esxVI_SelectionSpec *item);
esxVI_SelectionSpec *esxVI_SelectionSpec_DynamicCast(void *item);
int esxVI_SelectionSpec_AppendToList(esxVI_SelectionSpec **list, esxVI_SelectionSpec *item);
int esxVI_SelectionSpec_Serialize(esxVI_SelectionSpec *item, const char *element, virBufferPtr output);
int esxVI_SelectionSpec_SerializeList(esxVI_SelectionSpec *list, const char *element, virBufferPtr output);
int esxVI_SelectionSpec_Deserialize(xmlNodePtr node, esxVI_SelectionSpec **item);
int esxVI_SelectionSpec_DeserializeList(xmlNodePtr node, esxVI_SelectionSpec **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: ServiceContent
 */

struct _esxVI_ServiceContent {
    esxVI_ServiceContent *_unused;                         /* optional */
    esxVI_Type _type;                                      /* required */

    esxVI_ManagedObjectReference *rootFolder;              /* required */
    esxVI_ManagedObjectReference *propertyCollector;       /* required */
    esxVI_ManagedObjectReference *viewManager;             /* optional */
    esxVI_AboutInfo *about;                                /* required */
    esxVI_ManagedObjectReference *setting;                 /* optional */
    esxVI_ManagedObjectReference *userDirectory;           /* optional */
    esxVI_ManagedObjectReference *sessionManager;          /* optional */
    esxVI_ManagedObjectReference *authorizationManager;    /* optional */
    esxVI_ManagedObjectReference *perfManager;             /* optional */
    esxVI_ManagedObjectReference *scheduledTaskManager;    /* optional */
    esxVI_ManagedObjectReference *alarmManager;            /* optional */
    esxVI_ManagedObjectReference *eventManager;            /* optional */
    esxVI_ManagedObjectReference *taskManager;             /* optional */
    esxVI_ManagedObjectReference *extensionManager;        /* optional */
    esxVI_ManagedObjectReference *customizationSpecManager; /* optional */
    esxVI_ManagedObjectReference *customFieldsManager;     /* optional */
    esxVI_ManagedObjectReference *accountManager;          /* optional */
    esxVI_ManagedObjectReference *diagnosticManager;       /* optional */
    esxVI_ManagedObjectReference *licenseManager;          /* optional */
    esxVI_ManagedObjectReference *searchIndex;             /* optional */
    esxVI_ManagedObjectReference *fileManager;             /* optional */
    esxVI_ManagedObjectReference *virtualDiskManager;      /* optional */
    esxVI_ManagedObjectReference *virtualizationManager;   /* optional */
};

int esxVI_ServiceContent_Alloc(esxVI_ServiceContent **item);
void esxVI_ServiceContent_Free(esxVI_ServiceContent **item);
int esxVI_ServiceContent_Validate(esxVI_ServiceContent *item);
int esxVI_ServiceContent_Serialize(esxVI_ServiceContent *item, const char *element, virBufferPtr output);
int esxVI_ServiceContent_Deserialize(xmlNodePtr node, esxVI_ServiceContent **item);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: SharesInfo
 */

struct _esxVI_SharesInfo {
    esxVI_SharesInfo *_unused;                             /* optional */
    esxVI_Type _type;                                      /* required */

    esxVI_Int *shares;                                     /* required */
    esxVI_SharesLevel level;                               /* required */
};

int esxVI_SharesInfo_Alloc(esxVI_SharesInfo **item);
void esxVI_SharesInfo_Free(esxVI_SharesInfo **item);
int esxVI_SharesInfo_Validate(esxVI_SharesInfo *item);
int esxVI_SharesInfo_CastFromAnyType(esxVI_AnyType *anyType, esxVI_SharesInfo **item);
int esxVI_SharesInfo_Serialize(esxVI_SharesInfo *item, const char *element, virBufferPtr output);
int esxVI_SharesInfo_Deserialize(xmlNodePtr node, esxVI_SharesInfo **item);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: TaskInfo
 */

struct _esxVI_TaskInfo {
    esxVI_TaskInfo *_next;                                 /* optional */
    esxVI_Type _type;                                      /* required */

    char *key;                                             /* required */
    esxVI_ManagedObjectReference *task;                    /* required */
    char *name;                                            /* optional */
    char *descriptionId;                                   /* required */
    esxVI_ManagedObjectReference *entity;                  /* optional */
    char *entityName;                                      /* optional */
    esxVI_ManagedObjectReference *locked;                  /* optional, list */
    esxVI_TaskInfoState state;                             /* required */
    esxVI_Boolean cancelled;                               /* required */
    esxVI_Boolean cancelable;                              /* required */
    /* FIXME: error is currently ignored */
    esxVI_AnyType *result;                                 /* optional */
    esxVI_Int *progress;                                   /* optional */
    /* FIXME: reason is currently ignored */
    esxVI_DateTime *queueTime;                             /* required */
    esxVI_DateTime *startTime;                             /* optional */
    esxVI_DateTime *completeTime;                          /* optional */
    esxVI_Int *eventChainId;                               /* required */
};

int esxVI_TaskInfo_Alloc(esxVI_TaskInfo **item);
void esxVI_TaskInfo_Free(esxVI_TaskInfo **item);
int esxVI_TaskInfo_Validate(esxVI_TaskInfo *item);
int esxVI_TaskInfo_AppendToList(esxVI_TaskInfo **list, esxVI_TaskInfo *item);
int esxVI_TaskInfo_CastFromAnyType(esxVI_AnyType *anyType, esxVI_TaskInfo **item);
int esxVI_TaskInfo_CastListFromAnyType(esxVI_AnyType *anyType, esxVI_TaskInfo **list);
int esxVI_TaskInfo_Deserialize(xmlNodePtr node, esxVI_TaskInfo **item);
int esxVI_TaskInfo_DeserializeList(xmlNodePtr node, esxVI_TaskInfo **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: TraversalSpec
 *          extends SelectionSpec
 */

struct _esxVI_TraversalSpec {
    esxVI_TraversalSpec *_next;                            /* optional */
    esxVI_Type _type;                                      /* required */

    /* SelectionSpec */
    char *name;                                            /* optional */

    /* TraversalSpec */
    char *type;                                            /* required */
    char *path;                                            /* required */
    esxVI_Boolean skip;                                    /* optional */
    esxVI_SelectionSpec *selectSet;                        /* optional, list */
};

int esxVI_TraversalSpec_Alloc(esxVI_TraversalSpec **item);
void esxVI_TraversalSpec_Free(esxVI_TraversalSpec **item);
int esxVI_TraversalSpec_Validate(esxVI_TraversalSpec *item);
esxVI_TraversalSpec *esxVI_TraversalSpec_DynamicCast(void *item);
int esxVI_TraversalSpec_AppendToList(esxVI_TraversalSpec **list, esxVI_TraversalSpec *item);
int esxVI_TraversalSpec_Serialize(esxVI_TraversalSpec *item, const char *element, virBufferPtr output);
int esxVI_TraversalSpec_SerializeList(esxVI_TraversalSpec *list, const char *element, virBufferPtr output);
int esxVI_TraversalSpec_Deserialize(xmlNodePtr node, esxVI_TraversalSpec **item);
int esxVI_TraversalSpec_DeserializeList(xmlNodePtr node, esxVI_TraversalSpec **list);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: UpdateSet
 */

struct _esxVI_UpdateSet {
    esxVI_UpdateSet *_unused;                              /* optional */
    esxVI_Type _type;                                      /* required */

    char *version;                                         /* required */
    esxVI_PropertyFilterUpdate *filterSet;                 /* optional, list */
};

int esxVI_UpdateSet_Alloc(esxVI_UpdateSet **item);
void esxVI_UpdateSet_Free(esxVI_UpdateSet **item);
int esxVI_UpdateSet_Validate(esxVI_UpdateSet *item);
int esxVI_UpdateSet_Deserialize(xmlNodePtr node, esxVI_UpdateSet **item);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: UserSession
 */

struct _esxVI_UserSession {
    esxVI_UserSession *_unused;                            /* optional */
    esxVI_Type _type;                                      /* required */

    char *key;                                             /* required */
    char *userName;                                        /* required */
    char *fullName;                                        /* required */
    esxVI_DateTime *loginTime;                             /* required */
    esxVI_DateTime *lastActiveTime;                        /* required */
    char *locale;                                          /* required */
    char *messageLocale;                                   /* required */
};

int esxVI_UserSession_Alloc(esxVI_UserSession **item);
void esxVI_UserSession_Free(esxVI_UserSession **item);
int esxVI_UserSession_Validate(esxVI_UserSession *item);
int esxVI_UserSession_CastFromAnyType(esxVI_AnyType *anyType, esxVI_UserSession **item);
int esxVI_UserSession_Serialize(esxVI_UserSession *item, const char *element, virBufferPtr output);
int esxVI_UserSession_Deserialize(xmlNodePtr node, esxVI_UserSession **item);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: VirtualMachineConfigSpec
 */

struct _esxVI_VirtualMachineConfigSpec {
    esxVI_VirtualMachineConfigSpec *_unused;               /* optional */
    esxVI_Type _type;                                      /* required */

    char *changeVersion;                                   /* optional */
    char *name;                                            /* optional */
    char *version;                                         /* optional */
    char *uuid;                                            /* optional */
    esxVI_Long *npivNodeWorldWideName;                     /* optional, list */
    esxVI_Long *npivPortWorldWideName;                     /* optional, list */
    char *npivWorldWideNameType;                           /* optional */
    char *npivWorldWideNameOp;                             /* optional */
    char *locationId;                                      /* optional */
    char *guestId;                                         /* optional */
    char *alternateGuestName;                              /* optional */
    char *annotation;                                      /* optional */
    /* FIXME: files is currently ignored */
    /* FIXME: tools is currently ignored */
    /* FIXME: flags is currently ignored */
    /* FIXME: consolePreferences is currently ignored */
    /* FIXME: powerOpInfo is currently ignored */
    esxVI_Int *numCPUs;                                    /* optional */
    esxVI_Long *memoryMB;                                  /* optional */
    /* FIXME: deviceChange is currently ignored */
    esxVI_ResourceAllocationInfo *cpuAllocation;           /* optional */
    esxVI_ResourceAllocationInfo *memoryAllocation;        /* optional */
    /* FIXME: cpuAffinity is currently ignored */
    /* FIXME: memoryAffinity is currently ignored */
    /* FIXME: networkShaper is currently ignored */
    /* FIXME: cpuFeatureMask is currently ignored */
    /* FIXME: extraConfig is currently ignored */
    char *swapPlacement;                                   /* optional */
    /* FIXME: bootOptions is currently ignored */
};

int esxVI_VirtualMachineConfigSpec_Alloc(esxVI_VirtualMachineConfigSpec **item);
void esxVI_VirtualMachineConfigSpec_Free(esxVI_VirtualMachineConfigSpec **item);
int esxVI_VirtualMachineConfigSpec_Validate(esxVI_VirtualMachineConfigSpec *item);
int esxVI_VirtualMachineConfigSpec_Serialize(esxVI_VirtualMachineConfigSpec *item, const char *element, virBufferPtr output);
int esxVI_VirtualMachineConfigSpec_Deserialize(xmlNodePtr node, esxVI_VirtualMachineConfigSpec **item);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: VirtualMachineQuestionInfo
 */

struct _esxVI_VirtualMachineQuestionInfo {
    esxVI_VirtualMachineQuestionInfo *_unused;             /* optional */
    esxVI_Type _type;                                      /* required */

    char *id;                                              /* required */
    char *text;                                            /* required */
    esxVI_ChoiceOption *choice;                            /* required */
    /* FIXME: message is currently ignored */
};

int esxVI_VirtualMachineQuestionInfo_Alloc(esxVI_VirtualMachineQuestionInfo **item);
void esxVI_VirtualMachineQuestionInfo_Free(esxVI_VirtualMachineQuestionInfo **item);
int esxVI_VirtualMachineQuestionInfo_Validate(esxVI_VirtualMachineQuestionInfo *item);
int esxVI_VirtualMachineQuestionInfo_CastFromAnyType(esxVI_AnyType *anyType, esxVI_VirtualMachineQuestionInfo **item);
int esxVI_VirtualMachineQuestionInfo_Serialize(esxVI_VirtualMachineQuestionInfo *item, const char *element, virBufferPtr output);
int esxVI_VirtualMachineQuestionInfo_Deserialize(xmlNodePtr node, esxVI_VirtualMachineQuestionInfo **item);



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * VI Type: VirtualMachineSnapshotTree
 */

struct _esxVI_VirtualMachineSnapshotTree {
    esxVI_VirtualMachineSnapshotTree *_next;               /* optional */
    esxVI_Type _type;                                      /* required */

    esxVI_ManagedObjectReference *snapshot;                /* required */
    esxVI_ManagedObjectReference *vm;                      /* required */
    char *name;                                            /* required */
    char *description;                                     /* required */
    esxVI_DateTime *createTime;                            /* required */
    esxVI_VirtualMachinePowerState state;                  /* required */
    esxVI_Boolean quiesced;                                /* required */
    esxVI_VirtualMachineSnapshotTree *childSnapshotList;   /* optional, list */
};

int esxVI_VirtualMachineSnapshotTree_Alloc(esxVI_VirtualMachineSnapshotTree **item);
void esxVI_VirtualMachineSnapshotTree_Free(esxVI_VirtualMachineSnapshotTree **item);
int esxVI_VirtualMachineSnapshotTree_Validate(esxVI_VirtualMachineSnapshotTree *item);
int esxVI_VirtualMachineSnapshotTree_AppendToList(esxVI_VirtualMachineSnapshotTree **list, esxVI_VirtualMachineSnapshotTree *item);
int esxVI_VirtualMachineSnapshotTree_DeepCopy(esxVI_VirtualMachineSnapshotTree **dst, esxVI_VirtualMachineSnapshotTree *src);
int esxVI_VirtualMachineSnapshotTree_DeepCopyList(esxVI_VirtualMachineSnapshotTree **dstList, esxVI_VirtualMachineSnapshotTree *srcList);
int esxVI_VirtualMachineSnapshotTree_CastFromAnyType(esxVI_AnyType *anyType, esxVI_VirtualMachineSnapshotTree **item);
int esxVI_VirtualMachineSnapshotTree_CastListFromAnyType(esxVI_AnyType *anyType, esxVI_VirtualMachineSnapshotTree **list);
int esxVI_VirtualMachineSnapshotTree_Deserialize(xmlNodePtr node, esxVI_VirtualMachineSnapshotTree **item);
int esxVI_VirtualMachineSnapshotTree_DeserializeList(xmlNodePtr node, esxVI_VirtualMachineSnapshotTree **list);



